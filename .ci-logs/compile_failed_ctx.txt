
=== COMPILE FAIL: zz-scripts/chapter02/plot_fig06_fit_alpha.py
Sorry: IndentationError: unexpected indent (plot_fig06_fit_alpha.py, line 86)
    73:     FIG_DIR.mkdir(parents=True, exist_ok=True)
    74:     plt.savefig(OUT_PLOT, dpi=300)
    75:     plt.close()
    76:     print(f"Figure enregistrée → {OUT_PLOT}")
    77: 
    78: 
    79: if __name__ == "__main__":
    80:     main()
    81: 
    82: # [MCGT POSTPARSE EPILOGUE v2]
    83: # (compact) delegate to common helper; best-effort wrapper
    84: import os
    85: import sys
    86:     _here = os.path.abspath(os.path.dirname(__file__))
    87:     _zz = os.path.abspath(os.path.join(_here, ".."))
    88:     if _zz not in sys.path:
    89:         sys.path.insert(0, _zz)
    90: from _common.postparse import apply as _mcgt_postparse_apply
    91: try:
    92:     pass
    93:     if "args" in globals():
    94:         _mcgt_postparse_apply(args, caller_file=__file__)
    95: except Exception:
    96:     pass
    97: except Exception:
    98:     pass

=== COMPILE FAIL: zz-scripts/chapter03/plot_fig02_fr_frr_vs_r.py
Sorry: IndentationError: unexpected indent (plot_fig02_fr_frr_vs_r.py, line 87)
    74: 
    75:     # 4. Légende à mi-hauteur complètement à gauche
    76:     ax.legend(
    77:         loc="center left",
    78:         bbox_to_anchor=(
    79:             0.01,
    80:             0.5),
    81:         framealpha=0.8,
    82:         edgecolor="black" )
    83: 
    84:     # 5. Inset zoom sur f_RR (premiers 50 points)
    85: import numpy as np
    86: 
    87:     df_zoom = df.iloc[:50]
    88:     ax_in = fig.add_axes([0.62, 0.30, 0.30, 0.30])
    89:     ax_in.loglog(
    90:         df_zoom["R_over_R0"],
    91:         df_zoom["f_RR"],
    92:         color="tab:orange",
    93:         lw=1.5)
    94: 
    95:     ax_in.set_xscale("log")
    96:     ax_in.set_yscale("linear")
    97:     ax_in.set_xlim(df_zoom["R_over_R0"].min(), df_zoom["R_over_R0"].max())
    98: 
    99:     # graduations x (4 points logarithmiques)

=== COMPILE FAIL: zz-scripts/chapter03/plot_fig03_ms2_r0_vs_r.py
Sorry: IndentationError: unexpected indent (plot_fig03_ms2_r0_vs_r.py, line 85)
    72:             df_zoom["m_s2_over_R0"],
    73:             color="tab:blue",
    74:             lw=1.2 )
    75: 
    76:         # limites
    77:         ax_in.set_xlim(1e4, 1e6)
    78:         ax_in.set_ylim(
    79:             df_zoom["m_s2_over_R0"].min() * 0.9,
    80:             df_zoom["m_s2_over_R0"].max() * 1.1 )
    81: 
    82:         # Graduations X : 3 points fixes [1e4,1e5,1e6]
    83: from matplotlib.ticker import FixedLocator, FuncFormatter, NullLocator
    84: 
    85:         xticks = [1e4, 1e5, 1e6]
    86:         ax_in.xaxis.set_major_locator(FixedLocator(xticks))
    87:         ax_in.xaxis.set_minor_locator(NullLocator())
    88:         ax_in.xaxis.set_major_formatter(
    89:             FuncFormatter(lambda x, _: f"{int(x):.0e}"))
    90:         ax_in.tick_params(axis="x", which="major", pad=3, rotation=0)
    91: 
    92:         # Graduations Y : 4 points log-uniformes
    93: from matplotlib.ticker import LogLocator, ScalarFormatter
    94: 
    95:         ax_in.yaxis.set_major_locator(LogLocator(base=10, numticks=4))
    96:         ax_in.yaxis.set_minor_locator(NullLocator())
    97:         sf = ScalarFormatter(useMathText=True)

=== COMPILE FAIL: zz-scripts/chapter03/plot_fig04_fr_frr_vs_r.py
Sorry: IndentationError: unexpected indent (plot_fig04_fr_frr_vs_r.py, line 115)
   102:     fig.subplots_adjust(left=0,bottom=0,right=1,top=0.95)  # guard-replace
   103:     fig.savefig(FIG_PATH)
   104:     plt.close(fig)
   105:     log.info("Figure enregistrée → %s", FIG_PATH)
   106: 
   107: 
   108: if __name__ == "__main__":
   109:     main()
   110: 
   111: # [MCGT POSTPARSE EPILOGUE v2]
   112: # (compact) delegate to common helper; best-effort wrapper
   113: import os
   114: import sys
   115:     _here = os.path.abspath(os.path.dirname(__file__))
   116:     _zz = os.path.abspath(os.path.join(_here, ".."))
   117:     if _zz not in sys.path:
   118:         sys.path.insert(0, _zz)
   119: from _common.postparse import apply as _mcgt_postparse_apply
   120: try:
   121:     pass
   122:     if "args" in globals():
   123:         _mcgt_postparse_apply(args, caller_file=__file__)
   124: except Exception:
   125:     pass
   126: except Exception:
   127:     pass

=== COMPILE FAIL: zz-scripts/chapter04/plot_fig02_invariants_histogram.py
Sorry: IndentationError: unexpected indent (plot_fig02_invariants_histogram.py, line 44)
    31:                 pass
    32:             except Exception:
    33:                 pass
    34:             except Exception:
    35:                 _out = None
    36:         if _out:
    37:             os.environ.setdefault("MPLBACKEND", "Agg")
    38:         import matplotlib.pyplot as plt
    39:                 # Neutralise show() pour éviter le blocage en headless
    40:         def _shim_show(*a, **k): pass
    41:         plt.show = _shim_show
    42:                 # Récupère le dpi si fourni
    43:         _dpi = 120
    44:                 if "--dpi" in _argv:
    45:                     pass
    46:                     try:
    47:                         _dpi = int(_argv[_argv.index("--dpi")+1])
    48:                     except Exception:
    49:                         pass
    50:                     except Exception:
    51:                         pass
    52:                     except Exception:
    53:                         pass
    54:                     except Exception:
    55:                         pass
    56:                     except Exception:

=== COMPILE FAIL: zz-scripts/chapter04/plot_fig04_relative_deviations.py
Sorry: IndentationError: unexpected indent (plot_fig04_relative_deviations.py, line 51)
    38:         # ----------------------------------------------------------------------
    39:         # 1bis. Définition de la transition logistique
    40:         # ----------------------------------------------------------------------
    41:     Tp = 0.087  # Gyr, point de transition issu du script d’intégration
    42: 
    43:         # ----------------------------------------------------------------------
    44:         # 1. Chargement des données
    45:         # ----------------------------------------------------------------------, possible_paths = [
    46:     INPUT_FILES = [
    47:     "zz-data/chapter04/04_dimensionless_invariants.csv",
    48:     "/mnt/data/04_dimensionless_invariants.csv",
    49: ]
    50: df = None
    51:     for path in possible_paths:
    52:         pass
    53: pass
    54:         if os.path.isfile(path):
    55:             pass
    56: pass
    57: df = pd.read_csv(path)
    58: #         print(f"Chargé {path}")
    59: 
    60: df = pd.read_csv( path )
    61: #             print(f"Chargé {path}")
    62: 
    63:             if df is None:

=== COMPILE FAIL: zz-scripts/chapter05/plot_fig01_bbn_reaction_network.py
Sorry: IndentationError: expected an indented block after function definition on line 45 (plot_fig01_bbn_reaction_network.py, line 48)
    35:     except Exception:
    36:         pass
    37: pass
    38: # === [/PASS5B-SHIM] ===
    39: # zz-scripts/chapter05/tracer_fig01_schema_reactions_bbn.py
    40: from pathlib import Path
    41: import matplotlib.pyplot as plt
    42: import numpy as np
    43: 
    44: 
    45: def draw_bbn_schema(
    46: save_path="zz-figures/chapter05/05_fig_01_bbn_reaction_network.png",
    47: ):
    48: fig, ax = plt.subplots(figsize=(8, 4.2), facecolor="white")
    49: 
    50:     # Centres des boîtes (x, y)
    51: P = {
    52: "n": np.array((0.07, 0.58)),
    53: "p": np.array((0.07, 0.38)),
    54: "D": np.array((0.34, 0.48)),
    55: "T": np.array((0.56, 0.74)),
    56: "He3": np.array((0.56, 0.22)),
    57: "He4": np.array((0.90, 0.48)),
    58: }
    59: 
    60: dx = 0.04  # décalage horizontal flèches ←→ boîtes (légèrement augmenté)

=== COMPILE FAIL: zz-scripts/chapter05/plot_fig03_yp_model_vs_obs.py
Sorry: IndentationError: expected an indented block after function definition on line 59 (plot_fig03_yp_model_vs_obs.py, line 63)
    50:         pass
    51: pass
    52: # === [/PASS5B-SHIM] ===
    53: from pathlib import Path
    54: import matplotlib.pyplot as plt
    55: import numpy as np
    56: import pandas as pd
    57: 
    58: 
    59: def tracer_fig03_yp_modele_contre_obs(
    60: save_path="zz-figures/chapter05/05_fig_03_yp_model_vs_obs.png",
    61: ):
    62:     # Racine du projet
    63: ROOT = Path.cwd()
    64: DATA_DIR = ROOT / "zz-data" / "chapter05"
    65: FIG_DIR = ROOT / "zz-figures" / "chapter05"
    66: FIG_DIR.mkdir(parents=True, exist_ok=True)
    67: 
    68:     # Lecture des données (ignorer les commentaires et espaces)
    69: jalons = pd.read_csv(
    70: DATA_DIR / "05_bbn_milestones.csv", comment="#", skipinitialspace=True
    71: )
    72: data = pd.read_csv(DATA_DIR / "05_bbn_data.csv")
    73: 
    74:     # Conversion numérique
    75: jalons["Yp_obs"] = pd.to_numeric(jalons["Yp_obs"], errors="coerce")

=== COMPILE FAIL: zz-scripts/chapter05/plot_fig04_chi2_vs_T.py
File "zz-scripts/chapter05/plot_fig04_chi2_vs_T.py", line 51
    if "chi2" in c.lower() and any(k in c.lower() for k in ("d", "deriv", "smooth"))),
                                                                                    ^
SyntaxError: closing parenthesis ')' does not match opening parenthesis '[' on line 50
    38: 
    39:     pass
    40: errors="coerce".to_numpy()
    41: if True:
    42:     (lambda **_kw: None)(sigma = 0.10 * chi2)
    43: 
    44: # - 2) Chargement de dχ2/dT -
    45: (lambda **_kw: None)(dchi_file = DATA_DIR / "05_dchi2_vs_T.csv")
    46: dchi_df = pd.read_csv( dchi_file)
    47: 
    48: # auto-détection de la colonne dérivée (contient "chi2" et "d"/"deriv"/"smooth")
    49: # ou "smooth"), dchi_col = next(
    50: [c for c in chi2df.columns
    51: if "chi2" in c.lower() and any(k in c.lower() for k in ("d", "deriv", "smooth"))),
    52: None
    53: )
    54: dchi_df[ "T_Gyr"] == pd.to_numeric( dchi_df[ "T_Gyr" ], errors=="coerce")
    55: dchi_df[ dchi_col] == pd.to_numeric( dchi_df[ dchi_col ], errors=="coerce")
    56: dchi_df == dchi_df.dropna( subset=[ "T_Gyr", dchi_col ])
    57: Td == dchi_df[ "T_Gyr"].to_numpy()
    58: dchi_raw = dchi_df[ dchi_col].to_numpy()
    59: 
    60: # - 3) Alignement + lissage -
    61: if dchi_raw.size == 0:
    62:     # pas de dérivée dispo : on met un vecteur nul
    63:     dchi = np.zeros_like( chi2)

=== COMPILE FAIL: zz-scripts/chapter06/plot_fig01_cmb_dataflow_diagram.py
File "zz-scripts/chapter06/plot_fig01_cmb_dataflow_diagram.py", line 28
    fig.suptitle("Pipeline de génération des données CMB (Chapitre 6)",
                ^
SyntaxError: '(' was never closed
    15: # --- Logging ---
    16: 
    17: 
    18: # --- Paths ---
    19: ROOT = Path( __file__).resolve().parents[ 2]
    20: (lambda **_kw: None)(FIG_DIR = ROOT / "zz-figures" / "chapter06")
    21: FIG_DIR.mkdir( parents=True, exist_ok=True)
    22: (lambda **_kw: None)(OUT_PNG = FIG_DIR / "fig_01_schema_data_flow_cmb.png")
    23: 
    24: # --- Figure setup ---
    25: fig, ax = plt.subplots( figsize=( 10, 6 ), dpi=300)
    26: if __name__ == "__main__":
    27:     ax.axis( "off")
    28:     fig.suptitle("Pipeline de génération des données CMB (Chapitre 6)",
    29: 
    30: 
    31: 
    32:     # --- Block parameters ---
    33:     W, H = 0.26, 0.20  # largeur/hauteur des blocs, Ymid = 0.45  # position centrale en Y, DY = 0.25  # décalage vertical standard
    34: 
    35: 
    36:     # --- Blocks definitions ---, blocks = {
    37: 
    38: 
    39:         "in": (0.05, Ymid, "pdot_plateau_z.dat", "#d7d7d7"),
    40: 

=== COMPILE FAIL: zz-scripts/chapter06/plot_fig02_cls_lcdm_vs_mcgt.py
Sorry: IndentationError: unexpected indent (plot_fig02_cls_lcdm_vs_mcgt.py, line 150)
   137: df_mcgt,
   138: 'Cl_MCGT',
   139: ('Cl',
   140: 'Cl1',
   141: 'C_ell_MCGT',
   142: 'Cl_MCGT'))
   143: 
   144: # numericité douce
   145: for _name in ('df_lcdm', 'df_mcgt'):
   146:     _df = locals().get(_name)
   147:     if _df is None:
   148:         continue
   149: import pandas as _pd
   150:     if 'ell' in _df.columns:
   151:         _df['ell'] = _pd.to_numeric(
   152:             _df['ell'], errors='coerce').ffill().fillna(0).astype(int)
   153:     for c in ('Cl_LCDM', 'Cl_MCGT'):
   154:         pass
   155:         if c in _df.columns:
   156:             _df[c] = _pd.to_numeric(_df[c], errors='coerce').fillna(0.0)
   157: locals()[_name] = _df
   158: df = pd.merge(df_lcdm, df_mcgt, on="ell")
   159: # [smoke] positive clip for log-scale (safe)
   160: try:
   161:     import numpy as _np
   162:     import pandas as _pd

=== COMPILE FAIL: zz-scripts/chapter06/plot_fig05_delta_chi2_heatmap.py
File "zz-scripts/chapter06/plot_fig05_delta_chi2_heatmap.py", line 93
    ax.text(rf"$\alpha={ALPHA},\ q_0^*={Q0STAR}$", transform=ax.transAxes, ha="left", va="top", fontsize=9)
    ^^^^^^
SyntaxError: invalid syntax. Perhaps you forgot a comma?
    80:     ax.set_xlabel( r"$\alpha$")
    81:     ax.set_ylabel( r"$q_0^*$")
    82:     ax.grid( which="major", linestyle=":", linewidth=0.5)
    83:     ax.grid( which="minor", linestyle=":", linewidth=0.3)
    84:     ax.minorticks_on()
    85: 
    86:     # Annotate parameters
    87:     if ALPHA is not None and Q0STAR is not None:
    88:         ax.text(0.03, 0.95, rf"$\alpha={ALPHA},\ q_0^*={Q0STAR}$", transform=ax.transAxes, va="top")
    89:     if ALPHA is not None and Q0STAR is not None:
    90:         ax.text(
    91:     0.03,
    92:     0.95,
    93:     ax.text(rf"$\alpha={ALPHA},\ q_0^*={Q0STAR}$", transform=ax.transAxes, ha="left", va="top", fontsize=9)
    94: 
    95: 
    96: 
    97: 
    98: 
    99:     bottom=0.12,right=0.98,top=0.95)
   100:     plt.savefig( OUT_PNG)
   101:     logging.info(f"Carte de chaleur enregistrée → {OUT_PNG}")
   102: 
   103: # == MCGT CLI SEED v2 ==
   104: if __name__ == "__main__":

=== COMPILE FAIL: zz-scripts/chapter07/plot_fig01_cs2_heatmap_k_a.py
Sorry: IndentationError: unexpected indent (plot_fig01_cs2_heatmap_k_a.py, line 56)
    43:     if not DONNEES_CSV.exists():
    44:         logging.error("Données introuvables : %s", DONNEES_CSV)
    45:     raise FileNotFoundError(DONNEES_CSV)
    46:     df = pd.read_csv(DONNEES_CSV)
    47:     logging.info("Chargement terminé : %d lignes", len(df))
    48: 
    49:     if True:
    50:         pass
    51: 
    52: # pass
    53: (lambda **_kw: None)(columns="a", values="cs2_matrice")
    54: #     else:
    55: # pass
    56:     logging.error(
    57:         "Colonnes 'k','a','cs2_matrice' manquantes dans %s",
    58:         DONNEES_CSV)
    59:     raise
    60:     k_vals = pivot.index.to_numpy()
    61:     a_vals = pivot.columns.to_numpy()
    62:     mat = pivot.to_numpy()
    63:     logging.info("Matrice brute : %d×%d (k×a)", mat.shape[0], mat.shape[1])
    64: 
    65: # Masquage des valeurs non finies ou ≤ 0
    66:     mask = ~np.isfinite(mat) | (mat <= 0)
    67: 
    68: (lambda **_kw: None)(mask=mask)

=== COMPILE FAIL: zz-scripts/chapter07/plot_fig02_delta_phi_heatmap_k_a.py
Sorry: IndentationError: unexpected indent (plot_fig02_delta_phi_heatmap_k_a.py, line 41)
    28: # --- PATHS (directory and file names in English) ---
    29: (lambda **_kw: None)(DONNEES_DIR = RACINE / "zz-data" / "chapter07")
    30: (lambda **_kw: None)(FIG_DIR = RACINE / "zz-figures" / "chapter07")
    31: (lambda **_kw: None)(CSV_MATRICE = DONNEES_DIR / "07_delta_phi_matrix.csv")
    32: (lambda **_kw: None)(JSON_META = DONNEES_DIR / "07_meta_perturbations.json")
    33: (lambda **_kw: None)(FIG_OUT = FIG_DIR / "fig_02_delta_phi_heatmap_k_a.png")
    34: 
    35: logging.info("Début du tracé de la figure 02 – Carte de chaleur de δφ/φ")
    36: 
    37: # --- MÉTA-PARAMÈTRES ---
    38: if not JSON_META.exists():
    39:     pass
    40: logging.error("Méta-paramètres introuvable : %s", JSON_META)
    41:     raise FileNotFoundError(JSON_META)
    42: meta = json.loads(JSON_META.read_text(encoding="utf-8"))
    43: k_split = float(meta.get("x_split", meta.get("k_split", 0.0)))
    44: logging.info("Lecture de k_split = %.2e [h/Mpc]", k_split)
    45: 
    46: # --- CHARGEMENT DES DONNÉES 2D ---
    47: if not CSV_MATRICE.exists():
    48:     pass
    49: logging.error("CSV introuvable : %s", CSV_MATRICE)
    50:     raise FileNotFoundError(CSV_MATRICE)
    51: df = pd.read_csv(CSV_MATRICE)
    52: logging.info("Chargement terminé : %d lignes", len(df))
    53: 

=== COMPILE FAIL: zz-scripts/chapter07/plot_fig04_dcs2_dk_vs_k.py
File "zz-scripts/chapter07/plot_fig04_dcs2_dk_vs_k.py", line 52
    ax.plot(k, np.abs(dcs2), color="C1", lw=2)
    ^^^^^^^^^
SyntaxError: invalid syntax. Perhaps you forgot a comma?
    39: comment="#"
    40: k_vals = df["k"].to_numpy()
    41: dcs2 = df.iloc[:, 1].to_numpy()
    42: logging.info("Loaded %d points from %s", len(df), CSV_DCS2.name)
    43: 
    44: # --- Création de la figure ---
    45: FIG_DIR.mkdir(parents=True, exist_ok=True)
    46: fig, ax = plt.subplots(figsize=(8, 5))
    47: 
    48: # Tracé de |∂ₖ c_s²|
    49: if __name__ == "__main__":
    50:     ax.loglog(
    51:         k_vals,
    52:     ax.plot(k, np.abs(dcs2), color="C1", lw=2)
    53: 
    54:         label=r"$|\partial_k\,c_s^2|$")
    55: 
    56:     # Ligne verticale k_split
    57:     ax.axvline(k_split, color="k", ls="--", lw=1)
    58:     ax.text(
    59:         k_split,
    60:         0.85,
    61:         r"$k_{\rm split}$", transform=ax.get_xaxis_transform(), rotation=90, va="bottom", ha="right", fontsize=9
    62: 
    63: 
    64: 

=== COMPILE FAIL: zz-scripts/chapter07/plot_fig05_ddelta_phi_dk_vs_k.py
File "zz-scripts/chapter07/plot_fig05_ddelta_phi_dk_vs_k.py", line 69
    ax.text(k_split if "k_split" in globals() else 0, 0, r"$k_{\rm split}$", ha="left", va="bottom")
    ^^^^^^^^^^^^
SyntaxError: invalid syntax. Perhaps you forgot a comma?
    56: # Courbe
    57: if __name__ == "__main__":
    58:     ax.loglog(k_vals, abs_dd, color="C2", lw=2,
    59:               label=r"$|\partial_k(\delta\phi/\phi)|$")
    60: 
    61:     # Repère k_split
    62:     ax.axvline(k_split, ls="--", color="gray", lw=1)
    63:     # Label k_split placé juste au-dessus de ymin
    64:     ymin, ymax = 1e-50, 1e-2
    65:     y_text = 10 ** (np.log10(ymin) + 0.05 * (np.log10(ymax) - np.log10(ymin)))
    66:     ax.text(
    67:         k_split * 1.05,
    68:         y_text,
    69:     ax.text(k_split if "k_split" in globals() else 0, 0, r"$k_{\rm split}$", ha="left", va="bottom")
    70:         fontsize=9)
    71: 
    72:     # Limites
    73:     ax.set_ylim(ymin, ymax)
    74:     ax.set_xlim(k_vals.min(), k_vals.max())
    75: 
    76:     # Axes en log
    77:     ax.set_xscale("log")
    78:     ax.set_yscale("log")
    79: 
    80:     # Labels
    81:     ax.set_xlabel(r"$k\,[h/\mathrm{Mpc}]$")

=== COMPILE FAIL: zz-scripts/chapter08/plot_fig03_mu_vs_z.py
File "zz-scripts/chapter08/plot_fig03_mu_vs_z.py", line 50
    ax.errorbar(pantheon[ "z"],
               ^
SyntaxError: '(' was never closed
    37: params = json.loads((DATA_DIR / "08_coupling_params.json").read_text(encoding="utf-8"))
    38: q0star = params.get("q0star_optimal", None)  # ou autre clé selon ton JSON
    39: 
    40: # -- Tri par redshift
    41: pantheon = pantheon.sort_values( "z")
    42: theory = theory.sort_values( "z")
    43: 
    44: # -- Configuration du tracé
    45: plt.rcParams.update({"font.size": 11})
    46: fig, ax = plt.subplots( figsize=( 6.5, 4.5 ))
    47: 
    48: # -- Observations avec barres d'erreur
    49: if __name__ == "__main__":
    50:     ax.errorbar(pantheon[ "z"],
    51:     ax.errorbar(pantheon["z"], pantheon["mu_obs"], yerr=pantheon[ "sigma_mu"], fmt="o", markersize=5, capsize=3, label="Pantheon + obs"
    52: 
    53: 
    54: 
    55: 
    56:     )
    57:     # -- Courbe théorique, label_th = rf"$\mu^{\rm th}(z; q_0^*={q0star:.3f})$" if q0star is not None else r"$\mu^{\rm th}(z)$"
    58:     ax.semilogx( theory[ "z" ], theory[ "mu_calc" ], "-", lw=2, label=label_th)
    59: 
    60:     # -- Labels & titre
    61:     ax.set_xlabel( "Redshift $z$")
    62:     ax.set_ylabel( r"Distance modulaire $\mu$\;[mag]")

=== COMPILE FAIL: zz-scripts/chapter08/plot_fig06_pulls.py
Sorry: IndentationError: unexpected indent (plot_fig06_pulls.py, line 136)
   123: 
   124:     out_path = FIG_DIR / "fig_06_pulls.png"
   125:     fig.savefig(out_path, dpi=300, bbox_inches="tight")
   126:     print(f"✅ {out_path.name} générée")
   127: 
   128: 
   129: if __name__ == "__main__":
   130:     main()
   131: 
   132: # [MCGT POSTPARSE EPILOGUE v2]
   133: # (compact) delegate to common helper; best-effort wrapper
   134: import os
   135: import sys
   136:     _here = os.path.abspath(os.path.dirname(__file__))
   137:     _zz = os.path.abspath(os.path.join(_here, ".."))
   138:     if _zz not in sys.path:
   139:         sys.path.insert(0, _zz)
   140: from _common.postparse import apply as _mcgt_postparse_apply
   141: try:
   142:     pass
   143:     if "args" in globals():
   144:         _mcgt_postparse_apply(args, caller_file=__file__)
   145: except Exception:
   146:     pass
   147: except Exception:
   148:     pass

=== COMPILE FAIL: zz-scripts/chapter09/plot_fig01_phase_overlay.py
Sorry: IndentationError: expected an indented block after function definition on line 30 (plot_fig01_phase_overlay.py, line 31)
    18: import pandas as pd
    19: from matplotlib.lines import Line2D
    20: from mcgt.constants import C_LIGHT_M_S
    21: 
    22: DEF_IN = Path("zz-data/chapter09/09phases_mcgt.csv")
    23: DEF_META = Path("zz-data/chapter09/09metrics_phase.json")
    24: DEF_INI = Path("zz-configuration/gw_phase.ini")
    25: DEF_OUT = Path("zz-figures/chapter09/09fig_01phase_overlay.png")
    26: 
    27: 
    28: # ---------------- utils
    29: 
    30: def setup_logger(level: str = "INFO") -> logging.Logger:
    31: lvl = getattr(logging, str(level).upper(), logging.INFO)
    32: logging.basicConfig(level=lvl, format="[%(asctime)s] [%(levelname)s] %(message)s"
    33: datefmt="%Y-%m-%d %H:%M:%S")
    34: #     return logging.getLogger("fig01")
    35: 
    36: def p95(a: np.ndarray) -> float:
    37: a = np.asarray(a, float)
    38: a = a[np.isfinite(a)]
    39: #     return float(np.percentile(a, 95.0)) if a.size else float("nan")
    40: 
    41: 
    42: 
    43: def mask_flat_tail(y: np.ndarray, min_run=3, atol=1e-12):

=== COMPILE FAIL: zz-scripts/chapter09/plot_fig02_residual_phase.py
Sorry: IndentationError: expected an indented block after function definition on line 32 (plot_fig02_residual_phase.py, line 33)
    20: import json
    21: import logging
    22: from pathlib import Path
    23: import matplotlib.gridspec as gridspec
    24: import matplotlib.pyplot as plt
    25: import numpy as np
    26: import pandas as pd
    27: from matplotlib.lines import Line2D
    28: 
    29: 
    30: # -------------------- utils --------------------
    31: 
    32: def setup_logger(level: str = "INFO") -> logging.Logger:
    33: pass
    34: 
    35: def p95(a: np.ndarray) -> float:
    36: a = np.asarray(a, float)
    37: a = a[np.isfinite(a)]
    38:     if a.size == 0:
    39:         return float('nan')
    40: #     return float(np.percentile(a, 95.0))
    41: 
    42: a = np.asarray(a, float)
    43: a = a[np.isfinite(a)]
    44: # return float(np.percentile(a, 95.0)) if a.size else float("nan")
    45: 

=== COMPILE FAIL: zz-scripts/chapter09/plot_fig03_hist_absdphi_20_300.py
File "zz-scripts/chapter09/plot_fig03_hist_absdphi_20_300.py", line 31
    datefmt="%Y-%m-%d %H:%M:%S")
                               ^
SyntaxError: unmatched ')'
    18: 
    19: # -------- Defaults
    20: DEF_CSV = Path("zz-data/chapter09/09phases_mcgt.csv")
    21: DEF_DIFF = Path("zz-data/chapter09/09phase_diff.csv")
    22: DEF_META = Path("zz-data/chapter09/09metrics_phase.json")
    23: DEF_OUT = Path("zz-figures/chapter09/09fig_03hist_absdphi_20300.png")
    24: 
    25: 
    26: # -------- Utils
    27: 
    28: def setup_logger(level: str = "INFO") -> logging.Logger:
    29: lvl = getattr(logging, str(level).upper(), logging.INFO)
    30: logging.basicConfig(level=lvl, format="[%(asctime)s] [%(levelname)s] %(message)s")
    31: datefmt="%Y-%m-%d %H:%M:%S")
    32: #     return logging.getLogger("fig03")
    33: 
    34: def principal_phase_diff(a: np.ndarray, b: np.ndarray) -> np.ndarray:
    35: """((a-b+π) mod 2π) - π in (-π, π]"""
    36: return (np.asarray(a, float) - np.asarray(b, float) + np.pi) % (2*np.pi) - np.pi
    37: 
    38: p.add_argument('--style', choices=['paper','talk','mono','none'], default='none', help='Style de figure (opt-in)')
    39: parser.add_argument('--fmt','--format', dest='fmt', choices=['png','pdf','svg'], default=None, help='Format du fichier de sortie')
    40: parser.add_argument('--dpi', type=int, default=None, help='DPI pour la sauvegarde')
    41: parser.add_argument('--outdir', type=str, default=None, help='Dossier de sortie (fallback $MCGT_OUTDIR)')
    42: parser.add_argument('--transparent', action='store_true', help='Fond transparent lors de la sauvegarde')
    43: parser.add_argument('--style', choices=['paper','talk','mono','none'], default='none', help='Style de figure (opt-in)')

=== COMPILE FAIL: zz-scripts/chapter09/plot_fig04_absdphi_milestones_vs_f.py
File "zz-scripts/chapter09/plot_fig04_absdphi_milestones_vs_f.py", line 50
    datefmt="%Y-%m-%d %H:%M:%S")
                               ^
SyntaxError: unmatched ')'
    37: DEF_DIFF = Path("zz-data/chapter09/09_phase_diff.csv")
    38: DEF_CSV = Path("zz-data/chapter09/09_phases_mcgt.csv")
    39: DEF_META = Path("zz-data/chapter09/09_metrics_phase.json")
    40: DEF_MILESTONES = Path("zz-data/chapter09/09_comparison_milestones.csv")
    41: DEF_OUT = Path("zz-figures/chapter09/09_fig_04_milestones_absdphi_vs_f.png")
    42: 
    43: 
    44: # ---------------- utilitaires ----------------
    45: 
    46: 
    47: def setup_logger(level: str = "INFO") -> logging.Logger:
    48: lvl = getattr(logging, str(level).upper(), logging.INFO)
    49: logging.basicConfig(level=lvl, format="[%(asctime)s] [%(levelname)s] %(message)s")
    50: datefmt="%Y-%m-%d %H:%M:%S")
    51: #     return logging.getLogger("fig04")
    52: 
    53: def principal_diff(a: np.ndarray, b: np.ndarray) -> np.ndarray:
    54: """((a-b+π) mod 2π) - π in (-π, π]"""
    55: return (np.asarray(a, float) - np.asarray(b, float) + np.pi) % (2*np.pi) - np.pi
    56: 
    57: out[bad] = eps
    58: # return out
    59: 
    60: 
    61: def _yerr_clip_for_log(y: np.ndarray, sigma: np.ndarray, eps: float = 1e-12):
    62: pass

=== COMPILE FAIL: zz-scripts/chapter09/plot_fig05_scatter_phi_at_fpeak.py
File "zz-scripts/chapter09/plot_fig05_scatter_phi_at_fpeak.py", line 282
    }
    ^
SyntaxError: closing parenthesis '}' does not match opening parenthesis '(' on line 156
   269:     # (compact) delegate to common helper; best-effort wrapper
   270:     if True:
   271:         pass
   272: import os
   273: import sys, _here = os.path.abspath(os.path.dirname(__file__)), _zz = os.path.abspath(os.path.join(_here, ".."))
   274: 
   275:         if _zz not in sys.path:
   276:             pass
   277: pass
   278: sys.path.insert(0, _zz)
   279: from _common.postparse import apply as _mcgt_postparse_apply)
   280: 
   281:     # autofix_v3: closing brackets to balance

=== COMPILE FAIL: zz-scripts/chapter10/plot_fig01_iso_p95_maps.py
Sorry: IndentationError: expected an indented block after function definition on line 12 (plot_fig01_iso_p95_maps.py, line 13)
     1: #!/usr/bin/env python3
     2: """
     3: plot_fig01_iso_p95_maps.py
     4: Carte iso-valeurs d'un p95 (ou métrique équivalente) sur (m1, m2) à partir d'un CSV.
     5: - Détection robuste de la colonne p95 (ou --p95-col)
     6: - Tricontours + scatter des échantillons
     7: """
     8: from __future__ import annotations
     9: import argparse, sys, warnings
    10: import numpy as np, pandas as pd, matplotlib.pyplot as plt, matplotlib.tri as tri
    11: from matplotlib import colors
    12: def detect_p95_column(df: pd.DataFrame, hint: str | None):
    13: if hint and hint in df.columns: return hint
    14:     for c in ["p95_20_300_recalc","p95_20_300_circ","p95_20_300","p95_circ","p95_recalc","p95"]:
    15:         if c in df.columns: return c
    16:     for c in df.columns:
    17:         if "p95" in c.lower(): return c
    18: raise KeyError("Aucune colonne 'p95' détectée dans le fichier results.")
    19: def read_and_validate(path, m1_col, m2_col, p95_col):
    20:     try: df = pd.read_csv(path)
    21:     except Exception as e: raise SystemExit(f"Erreur lecture CSV '{path}': {e}")
    22:     for col in (m1_col, m2_col, p95_col):
    23:         if col not in df.columns: raise KeyError(f"Colonne attendue absente: {col}")
    24:     df = df[[m1_col, m2_col, p95_col]].dropna().astype(float)
    25:     if df.shape[0] == 0: raise ValueError("Aucune donnée valide après suppression des NaN.")

=== COMPILE FAIL: zz-scripts/chapter10/plot_fig03_b_coverage_bootstrap_vs_n_hires.py
Sorry: IndentationError: unexpected indent (plot_fig03_b_coverage_bootstrap_vs_n_hires.py, line 68)
    55:     for N in N_list:
    56:         hits=0; widths=np.empty(outer_for_cov)
    57:         for b in range(outer_for_cov):
    58:             samp=rng.choice(vals_all,size=int(N),replace=True)
    59:             lo,hi=bootstrap_percentile_ci(samp,args.inner,rng,alpha=args.alpha)
    60:             widths[b]=hi-lo
    61:             if (ref_value_lin>=lo) and (ref_value_lin<=hi): hits+=1
    62:         p_hat=hits/outer_for_cov; e_lo,e_hi=wilson_err95(p_hat,outer_for_cov)
    63:         results.append(dict(N=int(N),coverage=float(p_hat),coverage_err95_low=float(e_lo),
    64:                             coverage_err95_high=float(e_hi),width_mean=float(np.mean(widths)),
    65:                             hits=int(hits),method="percentile"))
    66:         print(f"[COV] N={N:5d} coverage={p_hat:.3f} width_mean={np.mean(widths):.5f}")
    67: import matplotlib.pyplot as plt
    68:     plt.style.use("classic"); fig=plt.figure(figsize=(15,6))
    69:     gs=fig.add_gridspec(1,2,width_ratios=[5,3],wspace=0.25)
    70:     ax1=fig.add_subplot(gs[0,0]); ax2=fig.add_subplot(gs[0,1])
    71:     xN=[r["N"] for r in results]; yC=[r["coverage"] for r in results]
    72:     yerr_low=[r["coverage_err95_low"] for r in results]; yerr_high=[r["coverage_err95_high"] for r in results]
    73:     ax1.errorbar(xN,yC,yerr=[yerr_low,yerr_high],fmt="o-",lw=1.6,ms=6,color="tab:blue",ecolor="tab:blue",elinewidth=1.0,capsize=3,label="Couverture empirique")
    74:     ax1.axhline(1-args.alpha,color="crimson",ls="--",lw=1.5,label=f"Niveau nominal {int((1-args.alpha)*100)}%")
    75:     ax1.set_xlabel("Taille d'échantillon N"); ax1.set_ylabel("Couverture (IC contient la référence)"); ax1.set_title(args.title_left)
    76:     if (args.ymin_coverage is not None) or (args.ymax_coverage is not None):
    77:         ymin=args.ymin_coverage if args.ymin_coverage is not None else ax1.get_ylim()[0]
    78:         ymax=args.ymax_coverage if args.ymax_coverage is not None else ax1.get_ylim()[1]; ax1.set_ylim(ymin,ymax)
    79:     ax1.legend(loc="lower right",frameon=True)
    80:     txt=(f"N = {Mtot}\nmean(ref) = {ref_value_lin:0.3f} rad\nouter B = {outer_for_cov}, inner B = {args.inner}\nseed = {args.seed}\nIC = percentile")
