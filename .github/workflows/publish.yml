name: Build & Publish to (Test)PyPI

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Upgrade build tooling
        run: python -m pip install -U pip build twine

      - name: Clean
        run: rm -rf dist build *.egg-info || true

      - name: Build sdist & wheel
        run: python -m build

      - name: Twine check (local)
        run: python -m twine check dist/*

      - name: Show dist tree
        run: ls -lah dist || true

      - name: Upload dist artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/**
          if-no-files-found: error
          retention-days: 7

  publish-testpypi:
    needs: build
    runs-on: ubuntu-latest
    # Accept tags like v0.2.41rc10 (no hyphen).
    if: startsWith(github.ref, 'refs/tags/') && matches(github.ref, '.*rc[0-9]*$')
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: dist
        # If someone renamed the artifact, fail clearly here
          path: dist

      - name: Show downloaded dist tree
        run: ls -lah dist || true

      - name: Inspect METADATA (debug)
        run: |
          python - <<'PY'
          import glob, zipfile, sys
          wheels = sorted(glob.glob("dist/*.whl"))
          if not wheels:
              print("❌ Aucun .whl trouvé dans dist/"); sys.exit(2)
          for whl in wheels:
              with zipfile.ZipFile(whl) as zf:
                  meta = [n for n in zf.namelist() if n.endswith(".dist-info/METADATA")]
                  if not meta:
                      print(f"❌ {whl}: pas de .dist-info/METADATA"); continue
                  data = zf.read(meta[0]).decode("utf-8", "replace")
                  print(f"--- {whl} :: {meta[0]} (début) ---")
                  for line in data.splitlines()[:25]:
                      print(line)
                  print("--- FIN ---")
          PY

      - name: Publish to TestPyPI (twine)
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
        run: |
          python -m pip install -U twine
          python -m twine upload --non-interactive --skip-existing dist/* \
            --repository-url https://test.pypi.org/legacy/

  publish-pypi:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') && !matches(github.ref, '.*rc[0-9]*$')
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Show downloaded dist tree
        run: ls -lah dist || true

      - name: Inspect METADATA (debug)
        run: |
          python - <<'PY'
          import glob, zipfile, sys
          wheels = sorted(glob.glob("dist/*.whl"))
          if not wheels:
              print("❌ Aucun .whl trouvé dans dist/"); sys.exit(2)
          for whl in wheels:
              with zipfile.ZipFile(whl) as zf:
                  meta = [n for n in zf.namelist() if n.endswith(".dist-info/METADATA")]
                  if not meta:
                      print(f"❌ {whl}: pas de .dist-info/METADATA"); continue
                  data = zf.read(meta[0]).decode("utf-8", "replace")
                  print(f"--- {whl} :: {meta[0]} (début) ---")
                  for line in data.splitlines()[:25]:
                      print(line)
                  print("--- FIN ---")
          PY

      - name: Publish to PyPI (twine)
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          python -m pip install -U twine
          python -m twine upload --non-interactive --skip-existing dist/*
