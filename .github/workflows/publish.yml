name: Build & Publish to (Test)PyPI

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Upgrade build tooling
        run: python -m pip install -U pip build twine

      - name: Clean
        run: rm -rf dist build *.egg-info || true

      - name: Build sdist & wheel
        run: python -m build

      - name: Twine check (local)
        run: python -m twine check dist/*

      - name: Upload dist artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/*
          if-no-files-found: error
          retention-days: 7

  publish-testpypi:
    needs: build
    runs-on: ubuntu-latest
    # RC gating strict: tag commence par v, contient 'rc', et ne contient pas '-rc' (modifiez au besoin).
    if: startsWith(github.ref, 'refs/tags/') && startsWith(github.ref_name, 'v') && contains(github.ref_name, 'rc') && !contains(github.ref_name, '-rc')
    env:
      TEST_PYPI_API_TOKEN: ${{ secrets.TEST_PYPI_API_TOKEN }}
    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Download dist artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Twine check (downloaded)
        run: python -m twine check dist/*

      - name: Inspect METADATA (debug)
        run: |
          python - <<'PY'
          import glob, zipfile, sys
          wheels = sorted(glob.glob("dist/*.whl"))
          if not wheels:
              print("Info: aucun .whl trouve dans dist/"); sys.exit(0)
          for whl in wheels:
              with zipfile.ZipFile(whl) as zf:
                  meta = [n for n in zf.namelist() if n.endswith(".dist-info/METADATA")]
                  if not meta:
                      print(f"Probleme: {whl} sans .dist-info/METADATA"); continue
                  data = zf.read(meta[0]).decode("utf-8", "replace")
                  print(f"--- {whl} :: {meta[0]} (debut) ---")
                  for line in data.splitlines()[:25]:
                      print(line)
                  print("--- FIN ---")
          PY

      - name: Publish to TestPyPI (twine)
        if: env.TEST_PYPI_API_TOKEN != ''
        continue-on-error: true
        run: >
          python -m pip install -U twine >/dev/null &&
          python -m twine upload --non-interactive
          --repository-url https://test.pypi.org/legacy/
          -u __token__ -p "$TEST_PYPI_API_TOKEN" --skip-existing dist/*

      - name: Note missing TEST_PYPI_API_TOKEN
        if: env.TEST_PYPI_API_TOKEN == ''
        run: echo "Secret TEST_PYPI_API_TOKEN absent — publication TestPyPI sautee."

  publish-pypi:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') && startsWith(github.ref_name, 'v') && !contains(github.ref_name, 'rc')
    env:
      PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Download dist artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Twine check (downloaded)
        run: python -m twine check dist/*

      - name: Inspect METADATA (debug)
        run: |
          python - <<'PY'
          import glob, zipfile, sys
          wheels = sorted(glob.glob("dist/*.whl"))
          if not wheels:
              print("Info: aucun .whl trouve dans dist/"); sys.exit(0)
          for whl in wheels:
              with zipfile.ZipFile(whl) as zf:
                  meta = [n for n in zf.namelist() if n.endswith(".dist-info/METADATA")]
                  if not meta:
                      print(f"Probleme: {whl} sans .dist-info/METADATA"); continue
                  data = zf.read(meta[0]).decode("utf-8", "replace")
                  print(f"--- {whl} :: {meta[0]} (debut) ---")
                  for line in data.splitlines()[:25]:
                      print(line)
                  print("--- FIN ---")
          PY

      - name: Publish to PyPI (twine)
        if: env.PYPI_API_TOKEN != ''
        continue-on-error: true
        run: >
          python -m pip install -U twine >/dev/null &&
          python -m twine upload --non-interactive
          -u __token__ -p "$PYPI_API_TOKEN" --skip-existing dist/*

      - name: Note missing PYPI_API_TOKEN
        if: env.PYPI_API_TOKEN == ''
        run: echo "Secret PYPI_API_TOKEN absent — publication PyPI sautee."
