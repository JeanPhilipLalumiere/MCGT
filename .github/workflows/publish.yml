name: build-and-publish

on:
  push:
    tags:
      - 'v*'   # déclenche sur tout tag "vX.Y.Z"

permissions:
  contents: read
  id-token: write   # requis pour l’OIDC (Trusted Publishing PyPI)

concurrency:
  group: publish-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Installer outils de build
        run: python -m pip install -U pip build -c constraints/security-pins.txt

      - name: Build sdist & wheel
        run: python -m build

      - name: Afficher dist/
        run: |
          echo "== ls dist =="
          ls -l dist || true

      # Garde-fou 1 : la version produite par le build doit égale au tag (sans le 'v')
      - name: Garde-fou — Tag == version buildée
        run: |
          set -e
          TAG="${GITHUB_REF_NAME#v}"
          WHL="$(ls dist/*.whl | head -n1)"
          python - <<'PY' "$WHL" > .built_version
import sys, zipfile
whl = sys.argv[1]
with zipfile.ZipFile(whl) as z:
    meta = [n for n in z.namelist() if n.endswith('METADATA')][0]
    text = z.read(meta).decode()
vers = next(line.split(':',1)[1].strip() for line in text.splitlines() if line.startswith('Version:'))
print(vers)
PY
          BUILT="$(cat .built_version)"
          echo "TAG=$TAG  BUILT=$BUILT"
          test "$BUILT" = "$TAG" || { echo "::error::Tag ($TAG) ≠ version buildée ($BUILT)"; exit 1; }

      # Garde-fou 2 : ne pas publier si la version existe déjà sur PyPI
      - name: Garde-fou — Version absente de PyPI
        run: |
          set -e
          PKG="zz-tools"
          VER="${GITHUB_REF_NAME#v}"
          export PKG VER
          python - <<'PY'
import json, os, sys, urllib.request
pkg = os.environ["PKG"]
ver = os.environ["VER"]
with urllib.request.urlopen(f"https://pypi.org/pypi/{pkg}/json") as r:
    data = json.load(r)
if ver in data.get("releases", {}):
    print(f"ERROR: {pkg} {ver} existe déjà sur PyPI.")
    sys.exit(1)
print(f"OK: {pkg} {ver} absent de PyPI.")
PY

      - name: Publish to PyPI (Trusted Publishing)
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist
          skip-existing: true
