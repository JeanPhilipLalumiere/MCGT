name: Build & Publish to (Test)PyPI

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Clean
        run: rm -rf dist build *.egg-info
      - name: Upgrade build tooling
        run: python -m pip install -U pip build twine
      - name: Build sdist & wheel
        run: python -m build
      - name: Twine check
        run: python -m twine check dist/*
      - name: Show dist & ensure tag==version
        shell: bash
        run: |
          set -euo pipefail
          ls -l dist
          WHL="$(ls dist/*.whl | head -n1)"
          python - <<'PY' "$WHL"
          import sys, zipfile
          from email.parser import Parser
          with zipfile.ZipFile(sys.argv[1]) as z:
              meta = [n for n in z.namelist() if n.endswith('METADATA')][0]
              msg = Parser().parsestr(z.read(meta).decode())
              print("Name:", msg.get('Name')); print("Version:", msg.get('Version'))
          PY
          TAG="${GITHUB_REF_NAME#v}"
          PKG_VER=$(python - <<'PY' "$WHL"
          import sys, zipfile
          from email.parser import Parser
          from zipfile import ZipFile
          with ZipFile(sys.argv[1]) as z:
              meta = [n for n in z.namelist() if n.endswith('METADATA')][0]
              print(Parser().parsestr(z.read(meta).decode()).get('Version'))
          PY
          )
          test "$TAG" = "$PKG_VER" || { echo "::error::Tag ($TAG) != package version ($PKG_VER)"; exit 1; }
      - uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/*

  publish-testpypi:
    needs: build
    if: startsWith(github.ref, 'refs/tags/') && contains(github.ref, '-rc')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist
      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@v1.12.2
        with:
          packages-dir: dist
          repository-url: https://test.pypi.org/legacy/
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          skip-existing: true

  publish-pypi:
    needs: build
    if: startsWith(github.ref, 'refs/tags/') && !contains(github.ref, '-rc')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@v1.12.2
        with:
          packages-dir: dist
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip-existing: true
