name: Build & Publish to (Test)PyPI

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Clean dist/build
        run: rm -rf dist build *.egg-info
      - name: Upgrade build tooling
        run: python -m pip install -U pip build twine
      - name: Build sdist & wheel
        run: python -m build
      - name: Twine check
        run: python -m twine check dist/*
      - name: Show package info & enforce tag-version match
        shell: bash
        run: |
          set -euo pipefail
          ls -l dist
          WHL="$(ls dist/*.whl | head -n1)"
          python - <<'PY' "$WHL"
import sys, zipfile
from email.parser import Parser
whl = sys.argv[1]
with zipfile.ZipFile(whl) as z:
    meta = [n for n in z.namelist() if n.endswith('METADATA')][0]
    msg = Parser().parsestr(z.read(meta).decode())
    print("Name:", msg.get('Name')); print("Version:", msg.get('Version'))
PY
          TAG="${GITHUB_REF_NAME#v}"
          PKG_VER=$(python - <<'PY' "$WHL"
import sys, zipfile
from email.parser import Parser
from zipfile import ZipFile
with ZipFile(sys.argv[1]) as z:
    meta = [n for n in z.namelist() if n.endswith('METADATA')][0]
    print(Parser().parsestr(z.read(meta).decode()).get('Version'))
PY
)
          if [[ "$TAG" != "$PKG_VER" ]]; then
            echo "::error::Tag ($TAG) != package version ($PKG_VER)"
            exit 1
          fi
      - name: Upload dist artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/*

  publish-testpypi:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') && contains(github.ref, '-rc')
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist
      - name: List dist content (debug)
        run: ls -l dist && python - <<'PY'
import glob, zipfile
from email.parser import Parser
for whl in glob.glob("dist/*.whl"):
    with zipfile.ZipFile(whl) as z:
        meta = [n for n in z.namelist() if n.endswith('METADATA')][0]
        msg = Parser().parsestr(z.read(meta).decode())
        print(whl, "->", msg.get("Name"), msg.get("Version"))
PY
      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@v1.12.2
        with:
          packages-dir: dist
          repository-url: https://test.pypi.org/legacy/
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          skip-existing: true

  publish-pypi:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') && !contains(github.ref, '-rc')
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist
      - name: List dist content (debug)
        run: ls -l dist && python - <<'PY'
import glob, zipfile
from email.parser import Parser
for whl in glob.glob("dist/*.whl"):
    with zipfile.ZipFile(whl) as z:
        meta = [n for n in z.namelist() if n.endswith('METADATA')][0]
        msg = Parser().parsestr(z.read(meta).decode())
        print(whl, "->", msg.get("Name"), msg.get("Version"))
PY
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@v1.12.2
        with:
          packages-dir: dist
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip-existing: true
