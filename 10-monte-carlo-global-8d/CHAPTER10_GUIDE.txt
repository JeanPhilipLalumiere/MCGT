CHAPITRE 10 – GUIDE D’UTILISATION
Monte-Carlo global 8D (échantillonnage, métriques p95, bootstrap)
--------------------------------------------------------------------

Objectif
--------
Ce guide décrit la génération des données, la production des figures et la
compilation LaTeX pour le **Chapitre 10 – Monte-Carlo global 8D** du projet MCGT.
Il s’agit d’une version initiale prête à la publication.

Prérequis minimaux
------------------
- Python ≥ 3.10
  • numpy, pandas, matplotlib
  • (optionnel) scipy
- LaTeX (pdflatex) avec amsmath, graphicx, siunitx, booktabs, hyperref, adjustbox
- OS : Linux / macOS / WSL

Conventions générales (qualité & cohérence)
-------------------------------------------
- Fenêtre de métriques par défaut : **[20, 300] Hz** (cohérence Chapitre 09).
- Métrique principale : **p95** des résidus de phase selon la définition « circular mean ».
- Colonnes standardisées :
  • `p95_20_300`            : valeur historique (linéaire) si existante.
  • `p95_20_300_recalc`     : **valeur recalculée circulaire** (colonne de référence).
- Dénominations de dimensions 8D : `m1, m2, m3, m4, m5, m6, m7, m8`.
- Tous les chemins sont **relatifs à la racine** du dépôt.
- Les noms de fichiers et commandes sont en **anglais** ; le texte explicatif en **français**.

--------------------------------------------------------------------
1) SOURCES LaTeX (dossier `10-monte-carlo-global-8d/`)
--------------------------------------------------------------------
- 10_monte_carlo_global_conceptuel.tex
- 10_monte_carlo_global_details.tex
- CHAPTER10_GUIDE.txt (le présent document)

Compilation (voir §10).

--------------------------------------------------------------------
2) DONNÉES D’ENTRÉE (dossier `zz-data/chapter10/`)
--------------------------------------------------------------------
2.1 `10_mc_config.json` (configuration d’expérience)
| Clé                    | Description                                        | Unité | Remarque                                        |
| :--------------------- | :------------------------------------------------- | :---- | :---------------------------------------------- |
| rng_seed               | Graine RNG globale                                 |  —    | entier                                          |
| metrics_window_Hz      | Fenêtre de calcul des métriques (p.ex. [20,300])   |  Hz   | cohérent avec Chapitre 09                       |
| bootstrap.outer        | B externe (répétitions pour la **couverture**)     |  —    | p.ex. 400 (hires : 2000)                        |
| bootstrap.inner        | B interne (répétitions pour **IC percentile**)     |  —    | p.ex. 2000                                      |
| bootstrap.alpha        | Niveau α (IC 1−α)                                  |  —    | 0.05 → IC 95 %                                  |
| grid.m1…grid.m8        | Bornes & pas de la grille 8D                       |  —    | champs `min`/`max`/`n` par dimension            |
| outputs.with_fpeak     | Export des colonnes liées à f_peak                 |  —    | booléen                                         |

2.2 `10_mc_samples.csv` (échantillons 8D)
| Colonne | Description                                | Unité | Remarque                            |
| :------ | :----------------------------------------- | :---- | :---------------------------------- |
| m1…m8   | Coordonnées/paramètres de l’espace 8D      |  —    | maillage ou tirages                 |
| seed    | (optionnel) graine par échantillon         |  —    | si présent                          |

2.3 `10_mc_results.csv` (résultats **linéaires**)
| Colonne         | Description                                              | Unité | Remarque                             |
| :-------------- | :------------------------------------------------------- | :---- | :----------------------------------- |
| m1…m8           | Position de l’essai dans l’espace 8D                     |  —    | —                                     |
| p95_20_300      | p95 sur [20,300] Hz (calcul linéaire historique)         |  rad  | utile pour comparaison                |
| (autres)        | Moyenne/écart-type/etc. selon config                     |  —    | dépend de `10_mc_config.json`         |

2.4 `10_mc_results.circ.csv` (résultats **circulaires**)
| Colonne             | Description                                          | Unité | Remarque                                       |
| :------------------ | :--------------------------------------------------- | :---- | :--------------------------------------------- |
| m1…m8               | Position de l’essai                                  |  —    | —                                               |
| p95_20_300          | p95 (valeur d’origine si présente)                   |  rad  | comparaison                                     |
| p95_20_300_recalc   | p95 **recalculé** (moyenne circulaire, cohérent MCGT)|  rad  | **colonne utilisée par les figures**            |

2.5 `10_mc_results.agg.csv` (agrégés **linéaires**)
| Colonne           | Description                                | Unité | Remarque                        |
| :---------------- | :----------------------------------------- | :---- | :------------------------------ |
| m1, m2 (…)*       | Clé(s) de groupement (cellule/grille)      |  —    | typiquement (m1,m2)             |
| count             | Nombre d’essais dans la cellule            |  —    | —                                |
| mean_p95          | Moyenne de p95 (linéaire)                  |  rad  | agrégation                       |
| median_p95        | Médiane de p95 (linéaire)                  |  rad  | —                                |
| (autres stats)    | Écart-type, quantiles, etc.                |  —    | selon pipeline                   |
| *selon config     |                                            |       |                                  |

2.6 `10_mc_results.circ.agg.csv` (agrégés **circulaires**)
| Colonne              | Description                                     | Unité | Remarque                           |
| :------------------- | :---------------------------------------------- | :---- | :--------------------------------- |
| m1, m2 (…)*          | Clé(s) de groupement                            |  —    | —                                   |
| count                | Nombre d’essais dans la cellule                 |  —    | —                                   |
| mean_p95_recalc      | Moyenne de `p95_20_300_recalc`                  |  rad  | agrégation « circular mean »        |
| median_p95_recalc    | Médiane de `p95_20_300_recalc`                  |  rad  | —                                   |
| (autres stats)       | Écart-type, quantiles, etc.                     |  —    | selon pipeline                      |

2.7 `10_mc_results.circ.with_fpeak.csv` (avec jalons f_peak)
| Colonne             | Description                                   | Unité | Remarque                              |
| :------------------ | :-------------------------------------------- | :---- | :------------------------------------ |
| m1…m8               | Position de l’essai                           |  —    | —                                      |
| p95_20_300_recalc   | p95 recalculé (cohérent MCGT)                 |  rad  | —                                      |
| f_peak_Hz           | Fréquence jalon                               |  Hz   | export si `outputs.with_fpeak=true`    |
| phi_ref_at_fpeak    | φ_ref au f_peak                               |  rad  | —                                      |
| phi_mcgt_at_fpeak   | φ_mcgt au f_peak                              |  rad  | —                                      |

2.8 `10_mc_milestones_eval.csv` (sélections pour validations)
| Colonne      | Description                                   | Unité | Remarque                       |
| :----------- | :-------------------------------------------- | :---- | :----------------------------- |
| label        | Nom/ID du jalon                               |  —    | pour annotations/contrôles     |
| m1…m8        | Coordonnées associées                         |  —    | —                               |
| (métriques)  | p95 / p95_recalc ou valeurs dérivées          |  rad  | selon export                    |

2.9 `10_mc_best.json` (meilleur point)
| Clé                | Description                               | Unité | Remarque                       |
| :----------------- | :---------------------------------------- | :---- | :----------------------------- |
| best.m1…m8         | Coordonnées du meilleur point             |  —    | selon critère p95              |
| best.p95_recalc    | p95_20_300_recalc du meilleur             |  rad  | cohérent MCGT                  |
| meta.criteria      | Détail du critère de sélection            |  —    | median/mean/p95, etc.          |

2.10 `10_mc_best_bootstrap.json` (top-k & incertitudes)
| Clé               | Description                                  | Unité | Remarque                       |
| :---------------- | :------------------------------------------- | :---- | :----------------------------- |
| topk              | Liste des meilleurs éléments (indices/IDs)   |  —    | taille k configurable          |
| stats.mean/std    | Statistiques bootstrap sur p95_recalc        |  rad  | peut inclure IC 95 %           |
| meta              | Paramètres bootstrap (B, seed, etc.)         |  —    | traçabilité                    |

2.11 Exigences d’en-tête (CSV / JSON)
- Les CSV doivent contenir des **en-têtes explicites**, séparateur `,`, encodage UTF-8.
- Les JSON doivent être **valables** UTF-8, sans commentaires, clés en **snake_case**.

2.12 Schémas & validation (référence rapide)
- `zz-schemas/mc_config_schema.json`          ↔ `zz-data/chapter10/10_mc_config.json`
- `zz-schemas/mc_best_schema.json`            ↔ `zz-data/chapter10/10_mc_best.json`
- `zz-schemas/mc_results_table_schema.json`   ↔ `zz-data/chapter10/10_mc_results*.csv`

--------------------------------------------------------------------
3) SCRIPTS D’EXÉCUTION (dossier `zz-scripts/chapter10/`)
--------------------------------------------------------------------
3.1 `generate_data_chapter10.py` (pipeline principal)
- Rôle : lit la config/échantillons, évalue les métriques, écrit `10_mc_results.csv`.
- Entrées : `--config`, `--samples` ; sorties : `--out`.
- Exemple :
  python zz-scripts/chapter10/generate_data_chapter10.py \
    --config  zz-data/chapter10/10_mc_config.json \
    --samples zz-data/chapter10/10_mc_samples.csv \
    --out     zz-data/chapter10/10_mc_results.csv

3.2 `recompute_p95_circular.py` (recalcul circulaire)
- Rôle : produit `10_mc_results.circ.csv` à partir de `10_mc_results.csv`.
- Exemple :
  python zz-scripts/chapter10/recompute_p95_circular.py \
    --in  zz-data/chapter10/10_mc_results.csv \
    --out zz-data/chapter10/10_mc_results.circ.csv

3.3 `add_phi_at_fpeak.py` / `diag_phi_fpeak.py` (jalons f_peak)
- Rôle : ajoute les colonnes f_peak/φ_ref/φ_mcgt (si activé).
- Exemple :
  python zz-scripts/chapter10/add_phi_at_fpeak.py \
    --in  zz-data/chapter10/10_mc_results.circ.csv \
    --out zz-data/chapter10/10_mc_results.circ.with_fpeak.csv

3.4 `bootstrap_topk_p95.py` (sélection top-k + incertitudes)
- Rôle : calcule top-k selon `p95_20_300_recalc`, exporte `10_mc_best_bootstrap.json`.
- Exemple :
  python zz-scripts/chapter10/bootstrap_topk_p95.py \
    --in  zz-data/chapter10/10_mc_results.circ.csv \
    --out zz-data/chapter10/10_mc_best_bootstrap.json \
    --k 20 --outer 400 --inner 2000 --alpha 0.05 --seed 12345

3.5 `eval_primary_metrics_20_300.py` (métriques primaires)
- Rôle : évalue p95/moyenne/médiane/max sur [20,300] Hz (définition circulaire).
- Exemple :
  python zz-scripts/chapter10/eval_primary_metrics_20_300.py \
    --in  zz-data/chapter10/10_mc_results.circ.csv \
    --out zz-data/chapter10/10_mc_results.circ.agg.csv

3.6 `check_metrics_consistency.py` / `qc_wrapped_vs_unwrapped.py` / `inspect_topk_residuals.py`
- Rôle : diagnostics qualité (cohérence métriques, wrapping/unwrapping, inspection outliers).
- Exemples :
  python zz-scripts/chapter10/check_metrics_consistency.py \
    --csv zz-data/chapter10/10_mc_results.circ.csv --window 20 300
  python zz-scripts/chapter10/qc_wrapped_vs_unwrapped.py \
    --csv zz-data/chapter10/10_mc_results.circ.csv

3.7 `regen_fig05_using_circp95.py` (régénération Fig. 05)
- Rôle : régénère la figure histogramme/CDF avec la colonne circulaire.
- Exemple :
  python zz-scripts/chapter10/regen_fig05_using_circp95.py \
    --in zz-data/chapter10/10_mc_results.circ.csv \
    --out zz-figures/chapter10/fig_05_hist_cdf_metrics.png

3.8 `update_manifest_with_hashes.py` (traçabilité)
- Rôle : met à jour les manifests avec hash/checksum, date, taille.
- Exemple :
  python zz-scripts/chapter10/update_manifest_with_hashes.py \
    --manifest zz-manifests/manifest_master.json \
    --write

3.9 Génération/trace des figures (scripts `plot_*`)
- `plot_fig01_iso_p95_maps.py`         → `fig_01_iso_p95_maps.png`
- `plot_fig02_scatter_phi_at_fpeak.py` → `fig_02_scatter_phi_at_fpeak.png`
- `plot_fig03_convergence_p95_vs_n.py` → `fig_03_convergence_p95_vs_n.png`
- `plot_fig03b_bootstrap_coverage_vs_n.py` → `fig_03b_coverage_bootstrap_vs_n_hires.png`
- `plot_fig04_scatter_p95_recalc_vs_orig.py` → `fig_04_scatter_p95_recalc_vs_orig.png`
- `plot_fig05_hist_cdf_metrics.py`     → `fig_05_hist_cdf_metrics.png`
- `plot_fig06_residual_map.py`         → `fig_06_heatmap_absdp95_m1m2.png`
- `plot_fig07_synthesis.py`            → `fig_07_summary_comparison.png`

--------------------------------------------------------------------
4) FICHIERS PRODUITS ET EMPLACEMENTS
--------------------------------------------------------------------
4.1 Données (`zz-data/chapter10/`) — liste complète
- 10_mc_config.json
- 10_mc_samples.csv
- 10_mc_results.csv
- 10_mc_results.agg.csv
- 10_mc_results.circ.csv
- 10_mc_results.circ.agg.csv
- 10_mc_results.circ.with_fpeak.csv
- 10_mc_best.json
- 10_mc_best_bootstrap.json
- 10_mc_milestones_eval.csv

4.2 Figures (`zz-figures/chapter10/`) — liste complète
- fig_01_iso_p95_maps.png
- fig_02_scatter_phi_at_fpeak.png
- fig_03_convergence_p95_vs_n.png
- fig_03b_coverage_bootstrap_vs_n_hires.png
- fig_04_scatter_p95_recalc_vs_orig.png
- fig_05_hist_cdf_metrics.png
- fig_06_heatmap_absdp95_m1m2.png
- fig_07_summary_comparison.png

4.3 Diagnostics & archives (recommandé)
- Dossier : `zz-figures/chapter10/checks/` (logs, CSV intermédiaires, captures).
- Archivage : `tar czf zz-figures/chapter10/checks_archive_$(date +%Y%m%d).tar.gz checks/`

--------------------------------------------------------------------
5) PARAMÈTRES & CONFIGURATION (exemples)
--------------------------------------------------------------------
5.1 Exemples de `10_mc_config.json`
{
  "rng_seed": 12345,
  "metrics_window_Hz": [20, 300],
  "bootstrap": { "outer": 400, "inner": 2000, "alpha": 0.05 },
  "grid": {
    "m1": {"min": 10, "max": 80, "n": 36},
    "m2": {"min": 10, "max": 80, "n": 36},
    "m3": {"min": 0.0, "max": 0.2, "n": 21},
    "m4": {"min": 0.0, "max": 0.2, "n": 21},
    "m5": {"min": -0.5, "max": 0.5, "n": 41},
    "m6": {"min": -0.5, "max": 0.5, "n": 41},
    "m7": {"min": 0.0, "max": 1.0, "n": 26},
    "m8": {"min": 0.0, "max": 1.0, "n": 26}
  },
  "outputs": { "with_fpeak": true }
}

5.2 Règles d’écriture (CSV/JSON)
- CSV : séparateur `,`, décimales `.` ; pas de lignes vides ; colonnes triées logiquement.
- JSON : UTF-8, indentation 2 espaces, pas de commentaires ; clés stables (snake_case).

5.3 Variables d’environnement (facultatives)
- `MCGT_CONFIG=zz-configuration/mcgt-global-config.ini`
- `MCGT_RULES=zz-manifests/migration_map.json`

--------------------------------------------------------------------
6) GRILLES & ÉCHANTILLONNAGE 8D
--------------------------------------------------------------------
- Stratégies supportées :
  • Grille régulière (produit cartésien des `grid.mi`).
  • Latin Hypercube / Sobol (si activé dans les scripts).
  • Tirage uniforme avec `rng_seed` déterministe.
- Conseils :
  • Commencer par une grille (m1,m2) à résolution modérée, fixer les autres paramètres.
  • Étendre progressivement les dimensions actives pour évaluer la sensibilité de p95.
- Contrôles :
  • Couverture homogène dans (m1,m2) ; éviter les clusters artificiels.
  • Vérifier le nombre de points par cellule pour les figures iso/hexbin.

--------------------------------------------------------------------
7) DÉFINITIONS MÉTRIQUES & FORMULES
--------------------------------------------------------------------
- p95 (linéaire) : 95ᵉ percentile des résidus **linéaires** (historique).
- p95 (circulaire, **référence**) : 95ᵉ percentile des résidus en phase circulaire,
  via réduction modulo 2π et moyenne directionnelle avant agrégation.
- Colonnes :
  • `p95_20_300`        : valeur linéaire (si présente).
  • `p95_20_300_recalc` : valeur circulaire recalculée (**utiliser cette colonne**).
- Écarts : `dp95 = p95_20_300_recalc − p95_20_300` (tracé Fig. 06 en valeur absolue).

--------------------------------------------------------------------
8) BOOTSTRAP & ESTIMATION
--------------------------------------------------------------------
- `bootstrap.outer` : réplications pour **couverture empirique** des IC.
- `bootstrap.inner` : réplications pour **IC percentile** à l’intérieur d’un échantillon.
- `alpha` : niveau d’erreur → IC (1−α) ; α=0.05 → IC 95 %.
- Recommandations :
  • `outer=400, inner=2000` pour exécution standard.
  • `outer=2000, inner=2000` pour la figure hires (temps calcul ↑).
- Sorties associées : stats de couverture/largeur IC (Fig. 03b), fichiers `.json` récapitulatifs.

--------------------------------------------------------------------
9) VÉRIFICATIONS FIN DE PIPELINE (contrôles recommandés)
--------------------------------------------------------------------
#1 Intégrité de base
python - << 'PY'
import pandas as pd
df=pd.read_csv("zz-data/chapter10/10_mc_results.circ.csv")
print("n:",len(df)); print("cols:", list(df.columns)[:16])
print("NaNs:", df.isna().sum().sort_values(ascending=False).head())
PY

#2 Présence/usage de la colonne circulaire
python - << 'PY'
import pandas as pd
df=pd.read_csv("zz-data/chapter10/10_mc_results.circ.csv")
print("p95_20_300_recalc present:", "p95_20_300_recalc" in df.columns)
PY

#3 Cohérence circulaire (échantillon)
python - << 'PY'
import pandas as pd
df=pd.read_csv("zz-data/chapter10/10_mc_results.circ.csv").sample(5, random_state=0)
print(df[["m1","m2","p95_20_300","p95_20_300_recalc"]])
PY

#4 Comptes par cellule (Fig. 06)
python - << 'PY'
import pandas as pd
df=pd.read_csv("zz-data/chapter10/10_mc_results.circ.csv")
print("counts m1,m2:", df.groupby(["m1","m2"]).size().describe())
PY

#5 Fichiers « best » & milestones
ls -lh zz-data/chapter10/10_mc_best*.json zz-data/chapter10/10_mc_milestones_eval.csv

#6 Validation schémas (JSON/CSV)
python zz-schemas/validate_json.py zz-schemas/mc_config_schema.json  zz-data/chapter10/10_mc_config.json
python zz-schemas/validate_json.py zz-schemas/mc_best_schema.json    zz-data/chapter10/10_mc_best.json
python zz-schemas/validate_csv_table.py zz-schemas/mc_results_table_schema.json zz-data/chapter10/10_mc_results.csv
python zz-schemas/validate_csv_table.py zz-schemas/mc_results_table_schema.json zz-data/chapter10/10_mc_results.circ.csv

#7 Rapport de manifestes (traçabilité)
python zz-manifests/diag_consistency.py zz-manifests/manifest_master.json --report json --normalize-paths --content-check > zz-manifests/reports/diag_ch10.json

--------------------------------------------------------------------
10) COMMANDES D’EXÉCUTION (séquence type)
--------------------------------------------------------------------
# 1) Générer les échantillons (si besoin)
python zz-scripts/chapter10/generate_data_chapter10.py \
  --config  zz-data/chapter10/10_mc_config.json \
  --samples zz-data/chapter10/10_mc_samples.csv \
  --out     zz-data/chapter10/10_mc_results.csv

# 2) Recalcul « circular mean »
python zz-scripts/chapter10/recompute_p95_circular.py \
  --in  zz-data/chapter10/10_mc_results.csv \
  --out zz-data/chapter10/10_mc_results.circ.csv

# 3) Ajouter f_peak (si outputs.with_fpeak=true)
python zz-scripts/chapter10/add_phi_at_fpeak.py \
  --in  zz-data/chapter10/10_mc_results.circ.csv \
  --out zz-data/chapter10/10_mc_results.circ.with_fpeak.csv

# 4) Figures principales
python zz-scripts/chapter10/plot_fig01_iso_p95_maps.py \
  --results zz-data/chapter10/10_mc_results.circ.csv \
  --p95-col p95_20_300_recalc \
  --m1-col m1 --m2-col m2 \
  --out zz-figures/chapter10/fig_01_iso_p95_maps.png \
  --levels 16 --dpi 300

python zz-scripts/chapter10/plot_fig02_scatter_phi_at_fpeak.py \
  --results zz-data/chapter10/10_mc_results.circ.with_fpeak.csv \
  --x-col phi_ref_at_fpeak --y-col phi_mcgt_at_fpeak \
  --out zz-figures/chapter10/fig_02_scatter_phi_at_fpeak.png \
  --dpi 300 --clip-pi

python zz-scripts/chapter10/plot_fig03_convergence_p95_vs_n.py \
  --results zz-data/chapter10/10_mc_results.circ.csv \
  --p95-col p95_20_300_recalc \
  --out zz-figures/chapter10/fig_03_convergence_p95_vs_n.png \
  --B 2000 --seed 12345 --dpi 300

python zz-scripts/chapter10/plot_fig03b_bootstrap_coverage_vs_n.py \
  --results zz-data/chapter10/10_mc_results.circ.csv \
  --p95-col p95_20_300_recalc \
  --out zz-figures/chapter10/fig_03b_coverage_bootstrap_vs_n_hires.png \
  --outer 2000 --inner 2000 --M 2000 --alpha 0.05 --seed 12345 \
  --minN 100 --npoints 10 --dpi 300 \
  --ymin-coverage 0.88 --ymax-coverage 1.01

python zz-scripts/chapter10/plot_fig04_scatter_p95_recalc_vs_orig.py \
  --results zz-data/chapter10/10_mc_results.circ.csv \
  --orig-col p95_20_300 --recalc-col p95_20_300_recalc \
  --out zz-figures/chapter10/fig_04_scatter_p95_recalc_vs_orig.png \
  --dpi 300 --bins 50

python zz-scripts/chapter10/plot_fig05_hist_cdf_metrics.py \
  --results zz-data/chapter10/10_mc_results.circ.csv \
  --out zz-figures/chapter10/fig_05_hist_cdf_metrics.png \
  --ref-p95 0.7104087123286049 --bins 50 --dpi 150

python zz-scripts/chapter10/plot_fig06_residual_map.py \
  --results zz-data/chapter10/10_mc_results.circ.csv \
  --metric dp95 --abs \
  --m1-col m1 --m2-col m2 \
  --orig-col p95_20_300 --recalc-col p95_20_300_recalc \
  --gridsize 36 --mincnt 3 --dpi 300 \
  --out zz-figures/chapter10/fig_06_heatmap_absdp95_m1m2.png

python zz-scripts/chapter10/plot_fig07_synthesis.py \
  --manifest-a zz-figures/chapter10/fig_03b_coverage_bootstrap_vs_n_hires.manifest.json \
  --label-a "Percentile (outer=2000,inner=2000)" \
  --manifest-b zz-figures/chapter10/fig_03_convergence_p95_vs_n.manifest.json \
  --label-b "Convergence p95 vs N" \
  --out zz-figures/chapter10/fig_07_summary_comparison.png \
  --dpi 300 --figsize 14,6

--------------------------------------------------------------------
11) FIGURES (récapitulatif)
--------------------------------------------------------------------
- fig_01_iso_p95_maps.png              : cartes iso de p95 (m1,m2) + nuage d’échantillons.
- fig_02_scatter_phi_at_fpeak.png      : φ_ref(f_peak) vs φ_mcgt(f_peak), options de clipping à ±π.
- fig_03_convergence_p95_vs_n.png      : convergence de p95 avec la taille d’échantillon N.
- fig_03b_coverage_bootstrap_vs_n_hires.png : couverture et largeur d’IC vs N (réglage hires).
- fig_04_scatter_p95_recalc_vs_orig.png: comparaison p95 (recalc) vs p95 (orig).
- fig_05_hist_cdf_metrics.png          : histogrammes/CDF des métriques globales.
- fig_06_heatmap_absdp95_m1m2.png      : carte hexbin de |Δp95| sur (m1,m2) + compteurs.
- fig_07_summary_comparison.png        : panneaux de synthèse & comparaison bootstrap.

--------------------------------------------------------------------
12) INTÉGRATION MANIFESTES & CI
--------------------------------------------------------------------
- Mise à jour du **figure_manifest.csv** après génération des figures :
  • `path, chapter, figure_id, title, hash, bytes, updated_at`
- Vérification centralisée :
  python zz-manifests/diag_consistency.py zz-manifests/manifest_master.json \
    --report json --normalize-paths --content-check > zz-manifests/reports/diag_ch10.json
- Ajout des empreintes :
  python zz-scripts/chapter10/update_manifest_with_hashes.py \
    --manifest zz-manifests/manifest_master.json --write
- CI (rappel) : exécute `pytest`, validateurs JSON/CSV, diagnostics de manifestes (voir `zz-workflows/ci.yml`).

--------------------------------------------------------------------
13) COMPILATION LaTeX
--------------------------------------------------------------------
cd 10-monte-carlo-global-8d
pdflatex -interaction=nonstopmode 10_monte_carlo_global_conceptuel.tex
pdflatex -interaction=nonstopmode 10_monte_carlo_global_details.tex

--------------------------------------------------------------------
14) VERSIONNING & TAGS
--------------------------------------------------------------------
- Mettre à jour `CHANGELOG.md` (entrée “Chapitre 10 – Monte-Carlo global 8D”).
- Créer un tag Git : `git tag -a v10.0 -m "Chapitre 10 – Monte-Carlo global 8D"`
- Pousser le tag : `git push --tags`

--------------------------------------------------------------------
15) FAQ / PIÈGES COURANTS & DÉPANNAGE
--------------------------------------------------------------------
- **p95_20_300_recalc manquant** :
  • Relancer `recompute_p95_circular.py` sur `10_mc_results.csv`.
- **Désaccord fort entre p95 linéaire et circulaire** :
  • Vérifier wrapping/unwrapping avec `qc_wrapped_vs_unwrapped.py`.
- **Figures vides ou grumeleuses** :
  • Vérifier la densité d’échantillons par cellule ; augmenter `grid.*.n`.
- **Couverture bootstrap hors bande [0.9,1.0]** (Fig. 03b) :
  • Augmenter `outer` et/ou `inner`, vérifier `alpha` et le tirage RNG.
- **Erreurs de schéma** :
  • Lancer les validateurs de §9 #6 et corriger les colonnes/clé manquantes.

--------------------------------------------------------------------
FIN – CHAPITRE 10
--------------------------------------------------------------------

