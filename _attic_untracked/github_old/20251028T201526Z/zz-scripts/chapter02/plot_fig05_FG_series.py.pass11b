#!/usr/bin/env python3
"""
Tracer les séries brutes F(α)−1 et G(α) pour le Chapitre 2 (MCGT)

Produit :
- zz-figures/chapter02/02_fig_05_fg_series.png

Données sources :
- zz-data/chapter02/02_As_ns_vs_alpha.csv
"""
# === [PASS5B-SHIM] ===
# Shim minimal pour rendre --help et --out sûrs sans effets de bord.
import os, sys, atexit
if any(x in sys.argv for x in ("-h", "--help")):
    try:
        import argparse
        p = argparse.ArgumentParser(add_help=True, allow_abbrev=False)
        p.print_help()
    except Exception:
        print("usage: <script> [options]")
    sys.exit(0)

if any(arg.startswith("--out") for arg in sys.argv):
    os.environ.setdefault("MPLBACKEND", "Agg")
    try:
        import matplotlib.pyplot as plt
        def _no_show(*a, **k): pass
        if hasattr(plt, "show"):
            plt.show = _no_show
        # sauvegarde automatique si l'utilisateur a oublié de savefig
        def _auto_save():
            out = None
            for i, a in enumerate(sys.argv):
                if a == "--out" and i+1 < len(sys.argv):
                    out = sys.argv[i+1]
                    break
                if a.startswith("--out="):
                    out = a.split("=",1)[1]
                    break
            if out:
                try:
                    fig = plt.gcf()
                    if fig:
                        # marges raisonnables par défaut
                        try:
                            fig.subplots_adjust(left=0.07, right=0.98, top=0.95, bottom=0.12)
                        except Exception:
                            pass
                        fig.savefig(out, dpi=120)
                except Exception:
                    pass
        atexit.register(_auto_save)
    except Exception:
        pass
# === [/PASS5B-SHIM] ===

from pathlib import Path

import matplotlib.pyplot as plt
import pandas as pd

# Constantes Planck 2018
A_S0 = 2.10e-9
NS0 = 0.9649

# Chemins
ROOT = Path(__file__).resolve().parents[2]
DATA_IN = ROOT / "zz-data" / "chapter02" / "02_As_ns_vs_alpha.csv"
OUT_PLOT = ROOT / "zz-figures" / "chapter02" / "fig_05_FG_series.png"


def main():
    # Lecture des données
    df = pd.read_csv(DATA_IN)
    alpha = df["alpha"].values
    As = df["A_s"].values
    ns = df["n_s"].values

    # Calcul des séries
    Fm1 = As / A_S0 - 1.0
    Gm = ns - NS0

    # Tracé
    plt.figure()
    plt.plot(alpha, Fm1, marker="o", linestyle="-", label=r"$F(\alpha)-1$")
    plt.plot(alpha, Gm, marker="s", linestyle="--", label=r"$G(\alpha)$")
    plt.xlabel(r"$\alpha$")
    plt.ylabel("Valeur")
    plt.title("Séries $F(\\alpha)-1$ et $G(\\alpha)$")
    plt.grid(True, which="both", ls=":")
    plt.legend()
    fig=plt.gcf(); fig.subplots_adjust(left=0.07,right=0.98,top=0.95,bottom=0.12)
    plt.savefig(OUT_PLOT, dpi=300)
    plt.close()
    print(f"Figure enregistrée → {OUT_PLOT}")


if __name__ == "__main__":
    main()

# [MCGT POSTPARSE EPILOGUE v2]
# (compact) delegate to common helper; best-effort wrapper
try:
    import os
    import sys
    _here = os.path.abspath(os.path.dirname(__file__))
    _zz = os.path.abspath(os.path.join(_here, ".."))
    if _zz not in sys.path:
        sys.path.insert(0, _zz)
    from _common.postparse import apply as _mcgt_postparse_apply
except Exception:
    def _mcgt_postparse_apply(*_a, **_k):
        pass
try:
    if "args" in globals():
        _mcgt_postparse_apply(args, caller_file=__file__)
except Exception:
    pass
