
# === [PASS5B-SHIM] ===
# Shim minimal pour rendre --help et --out sûrs sans effets de bord.
import os, sys, atexit
if any(x in sys.argv for x in ("-h", "--help")):
    try:
        import argparse
        p = argparse.ArgumentParser(add_help=True, allow_abbrev=False)
        p.print_help()
    except Exception:
        print("usage: <script> [options]")
    sys.exit(0)

if any(arg.startswith("--out") for arg in sys.argv):
    os.environ.setdefault("MPLBACKEND", "Agg")
    try:
        import matplotlib.pyplot as plt
        def _no_show(*a, **k): pass
        if hasattr(plt, "show"):
            plt.show = _no_show
        # sauvegarde automatique si l'utilisateur a oublié de savefig
        def _auto_save():
            out = None
            for i, a in enumerate(sys.argv):
                if a == "--out" and i+1 < len(sys.argv):
                    out = sys.argv[i+1]
                    break
                if a.startswith("--out="):
                    out = a.split("=",1)[1]
                    break
            if out:
                try:
                    fig = plt.gcf()
                    if fig:
                        # marges raisonnables par défaut
                        try:
                            fig.subplots_adjust(left=0.07, right=0.98, top=0.95, bottom=0.12)
                        except Exception:
                            pass
                        fig.savefig(out, dpi=120)
                except Exception:
                    pass
        atexit.register(_auto_save)
    except Exception:
        pass
# === [/PASS5B-SHIM] ===
from pathlib import Path

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd


def tracer_fig03_yp_modele_contre_obs(
    save_path="zz-figures/chapter05/05_fig_03_yp_model_vs_obs.png",
):
    # Racine du projet
    ROOT = Path.cwd()
    DATA_DIR = ROOT / "zz-data" / "chapter05"
    FIG_DIR = ROOT / "zz-figures" / "chapter05"
    FIG_DIR.mkdir(parents=True, exist_ok=True)

    # Lecture des données (ignorer les commentaires et espaces)
    jalons = pd.read_csv(
        DATA_DIR / "05_bbn_milestones.csv", comment="#", skipinitialspace=True
    )
    data = pd.read_csv(DATA_DIR / "05_bbn_data.csv")

    # Conversion numérique
    jalons["Yp_obs"] = pd.to_numeric(jalons["Yp_obs"], errors="coerce")
    jalons["sigma_Yp"] = pd.to_numeric(jalons["sigma_Yp"], errors="coerce")
    jalons["T_Gyr"] = pd.to_numeric(jalons["T_Gyr"], errors="coerce")

    # Filtrer jalons valides
    clean = jalons.dropna(subset=["Yp_obs", "sigma_Yp", "T_Gyr"])

    # Interpolation simple de Yp_calc aux temps des jalons
    T_j = clean["T_Gyr"].values
    Yp_obs = clean["Yp_obs"].values
    sigma_Yp = clean["sigma_Yp"].values
    Yp_calc = np.interp(T_j, data["T_Gyr"].values, data["Yp_calc"].values)

    # Création de la figure
    fig, ax = plt.subplots(figsize=(8, 6))
    # Tracer les jalons avec barres d'erreur horizontales
    ax.errorbar(
        Yp_obs,
        Yp_calc,
        xerr=sigma_Yp,
        fmt="o",
        capsize=3,
        label="Jalons Yp")

    # Mettre en échelle log–log
    ax.set_xscale("log")
    ax.set_yscale("log")

    # Étendre la droite y = x sur toute la plage visible
    ax.set_aspect("equal", "box")
    # obtenir limites communes
    all_vals = np.concatenate([Yp_obs, Yp_calc])
    val_min, val_max = all_vals.min(), all_vals.max()
    # ajouter un petit margin
    margin = 0.1 * (val_max - val_min)
    lims = [val_min - margin, val_max + margin]
    ax.plot(lims, lims, "--", color="gray", label=r"$y=x$")
    ax.set_xlim(lims)
    ax.set_ylim(lims)

    # Labels et titre
    ax.set_xlabel(r"$Y_{p,\rm obs}$")
    ax.set_ylabel(r"$Y_{p,\rm calc}$")
    ax.set_title("Comparaison Yp modèle vs observations")
    ax.legend()

    # Sauvegarde
    fig=plt.gcf(); fig.subplots_adjust(left=0.07,right=0.98,top=0.95,bottom=0.12)
    plt.savefig(save_path, dpi=300)
    plt.close()


if __name__ == "__main__":
    tracer_fig03_yp_modele_contre_obs()

# [MCGT POSTPARSE EPILOGUE v2]
# (compact) delegate to common helper; best-effort wrapper
try:
    import os
    import sys
    _here = os.path.abspath(os.path.dirname(__file__))
    _zz = os.path.abspath(os.path.join(_here, ".."))
    if _zz not in sys.path:
        sys.path.insert(0, _zz)
    from _common.postparse import apply as _mcgt_postparse_apply
except Exception:
    def _mcgt_postparse_apply(*_a, **_k):
        pass
try:
    if "args" in globals():
        _mcgt_postparse_apply(args, caller_file=__file__)
except Exception:
    pass
