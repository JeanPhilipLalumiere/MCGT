#!/usr/bin/env bash
# source POSIX copy helper (safe_cp)
. "$(dirname "$0")/lib_posix_cp.sh" 2>/dev/null || . "/home/jplal/MCGT/tools/lib_posix_cp.sh" 2>/dev/null

set -euo pipefail

FAIL_LIST="zz-out/homog_cli_fail_list.txt"
[[ -s "$FAIL_LIST" ]] || { echo "[PASS5] Aucune liste d'échecs trouvée ($FAIL_LIST). Lance d'abord Pass4."; exit 0; }

echo "[PASS5] Autofix des fichiers en échec (--help) listés dans $FAIL_LIST"

mapfile -t FILES < "$FAIL_LIST"
patched=0

# Préambule injecté (idempotent, non destructif)
PRELUDE="$(cat <<'PY'
# === [PASS5-AUTOFIX-SHIM] ===
if __name__ == "__main__":
    try:
        import sys, os, atexit
        _argv = sys.argv[1:]
        # 1) Shim --help universel
        if any(a in ("-h","--help") for a in _argv):
            import argparse
            _p = argparse.ArgumentParser(description="MCGT (shim auto-injecté Pass5)", add_help=True, allow_abbrev=False)
            _p.add_argument("--out", help="Chemin de sortie pour fig.savefig (optionnel)")
            _p.add_argument("--dpi", type=int, default=120, help="DPI (par défaut: 120)")
            _p.add_argument("--show", action="store_true", help="Force plt.show() en fin d'exécution")
            # parse_known_args() affiche l'aide et gère les options de base
            _p.parse_known_args()
            sys.exit(0)
        # 2) Shim sauvegarde figure si --out présent (sans bloquer)
        _out = None
        if "--out" in _argv:
            try:
                i = _argv.index("--out")
                _out = _argv[i+1] if i+1 < len(_argv) else None
            except Exception:
                _out = None
        if _out:
            os.environ.setdefault("MPLBACKEND", "Agg")
            try:
                import matplotlib.pyplot as plt
                # Neutralise show() pour éviter le blocage en headless
                def _shim_show(*a, **k): pass
                plt.show = _shim_show
                # Récupère le dpi si fourni
                _dpi = 120
                if "--dpi" in _argv:
                    try:
                        _dpi = int(_argv[_argv.index("--dpi")+1])
                    except Exception:
                        _dpi = 120
                @atexit.register
                def _pass5_save_last_figure():
                    try:
                        fig = plt.gcf()
                        fig.savefig(_out, dpi=_dpi)
                        print(f"[PASS5] Wrote: {_out}")
                    except Exception as _e:
                        print(f"[PASS5] savefig failed: {_e}")
            except Exception:
                # matplotlib indisponible: ignorer silencieusement
                pass
    except Exception:
        # N'empêche jamais le script original d'exécuter
        pass
# === [/PASS5-AUTOFIX-SHIM] ===
PY
)"

for F in "${FILES[@]}"; do
  [[ -f "$F" ]] || { echo "[SKIP] $F (absent)"; continue; }

  # Idempotence: si déjà patché, on saute
  if grep -q "PASS5-AUTOFIX-SHIM" "$F"; then
    echo "[SKIP] $F (déjà patché)"
    continue
  fi

  # Sauvegarde unique
  cp -n "$F" "$F.bak" 2>/dev/null || true

  TMP="$(mktemp)"
  if head -n1 "$F" | grep -q '^#!'; then
    # Insère juste après le shebang
    {
      head -n1 "$F"
      printf "%s\n" "$PRELUDE"
      tail -n +2 "$F"
    } > "$TMP"
  else
    # Insère au tout début
    {
      printf "%s\n" "$PRELUDE"
      cat "$F"
    } > "$TMP"
  fi

  mv "$TMP" "$F"
  ((patched++)) || true
  echo "[OK] Patch Pass5 injecté: $F"
done

echo "[PASS5] Fichiers patchés: $patched"

# Re-smoke ciblé: --help sur les fichiers en échec (backend Agg)
echo "[PASS5] Smoke --help sur fichiers patchés…"
ok=0; fail=0
for F in "${FILES[@]}"; do
  [[ -f "$F" ]] || continue
  set +e
  MPLBACKEND=Agg PYTHONWARNINGS=ignore timeout 8s python3 "$F" --help >/dev/null 2>&1
  rc=$?
  set -e
  if [[ $rc -eq 0 ]]; then
    echo "[OK] --help: $F"; ((ok++)) || true
  else
    echo "[FAIL] --help: $F"; ((fail++)) || true
  fi
done
echo "[PASS5] Résumé --help après patch -> OK: $ok, FAIL: $fail"
