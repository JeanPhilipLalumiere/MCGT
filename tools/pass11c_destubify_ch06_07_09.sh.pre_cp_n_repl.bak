#!/usr/bin/env bash
# source POSIX copy helper (safe_cp)
. "$(dirname "$0")/lib_posix_cp.sh" 2>/dev/null || . "/home/jplal/MCGT/tools/lib_posix_cp.sh" 2>/dev/null

set -euo pipefail
echo "[PASS11c] Dé-stubifier ch06–07–09, purger tight_layout, re-valider (--help)"

CHAPS=( "zz-scripts/chapter06" "zz-scripts/chapter07" "zz-scripts/chapter09" )
INVENTORY="tools/homog_pass4_cli_inventory_safe_v5.sh"
[[ -x "$INVENTORY" ]] || { echo "[ERR] $INVENTORY introuvable"; exit 1; }

restored=0
for D in "${CHAPS[@]}"; do
  echo "[PASS11c] Recherche de stubs PASS6 dans $D ..."
  while IFS= read -r -d '' f; do
    if grep -q '=== \[PASS6-STUB\] ===' "$f"; then
      bak="${f}.bak"
      if [[ -f "$bak" ]]; then
        cp -f "$bak" "$f"
        echo "[OK] Restauré depuis .bak: $(basename "$f")"
        ((restored++)) || true
      else
        echo "[WARN] Pas de .bak pour $(basename "$f") — laissé tel quel"
      fi
    fi
  done < <(find "$D" -maxdepth 1 -type f -name "*.py" -print0)
done
echo "[PASS11c] Restaurations: $restored"

echo "[PASS11c] Purge tight_layout (rect + simple) dans ch06–07–09…"
for D in "${CHAPS[@]}"; do
  while IFS= read -r -d '' f; do
    cp -n "$f" "$f.pass11c" 2>/dev/null || true

    # fig.tight_layout(rect=[l,b,r,t]) -> subplots_adjust
    perl -0777 -pe '
      s/\bfig\.tight_layout\(\s*rect\s*=\s*\[\s*([^,]+)\s*,\s*([^,]+)\s*,\s*([^,]+)\s*,\s*([^\]]+)\s*\]\s*\)/
        "fig.subplots_adjust(left=".$1.",bottom=".$2.",right=".$3.",top=".$4.")"/sge;
    ' -i "$f"

    # plt.tight_layout(rect=[l,b,r,t]) -> subplots_adjust
    perl -0777 -pe '
      s/\bplt\.tight_layout\(\s*rect\s*=\s*\[\s*([^,]+)\s*,\s*([^,]+)\s*,\s*([^,]+)\s*,\s*([^\]]+)\s*\]\s*\)/
        "fig=plt.gcf(); fig.subplots_adjust(left=".$1.",bottom=".$2.",right=".$3.",top=".$4.")"/sge;
    ' -i "$f"

    # plt.tight_layout() -> subplots_adjust (marges par défaut)
    perl -0777 -pe '
      s/\bplt\.tight_layout\(\s*\)/fig=plt.gcf(); fig.subplots_adjust(left=0.07,bottom=0.12,right=0.98,top=0.95)/sg;
    ' -i "$f"

    # fig.tight_layout() -> subplots_adjust (mêmes marges)
    perl -0777 -pe '
      s/\bfig\.tight_layout\(\s*\)/fig.subplots_adjust(left=0.07,bottom=0.12,right=0.98,top=0.95)/sg;
    ' -i "$f"
  done < <(find "$D" -maxdepth 1 -type f -name "*.py" -print0)
done

echo "[PASS11c] Vérif: aucun tight_layout actif (hors lignes commentées)…"
viol=$(awk '/[[:alnum:]_]\.tight_layout\(/ && $0 !~ /^[[:space:]]*#/{print FILENAME ":" FNR ":" $0}' $(find "${CHAPS[@]}" -maxdepth 1 -name "*.py") || true)
[[ -z "${viol}" ]] || { echo "[FAIL] Restes détectés:"; echo "$viol"; exit 2; }
echo "[OK] Aucun tight_layout actif en ch06–07–09."

# Re-scan inventaire
"$INVENTORY"

# Si des FAIL subsistent dans ces chapitres, insérer un guard PASS5B puis re-scan
FAIL_LIST="zz-out/homog_cli_fail_list.txt"
if grep -qE '^zz-scripts/(chapter06|chapter07|chapter09)/' "$FAIL_LIST" 2>/dev/null; then
  echo "[PASS11c] Guards PASS5B sur FAIL ch06–07–09…"
  python3 - <<'PY'
import pathlib,re
marker_open="# === [PASS5B-SHIM] ==="
shim=r"""
# === [PASS5B-SHIM] ===
import os, sys, atexit
if any(x in sys.argv for x in ("-h","--help")):
    try:
        import argparse
        argparse.ArgumentParser(add_help=True, allow_abbrev=False).print_help()
    except Exception:
        print("usage: <script> [options]")
    raise SystemExit(0)
if any(a.startswith("--out") for a in sys.argv):
    os.environ.setdefault("MPLBACKEND","Agg")
    try:
        import matplotlib.pyplot as plt
        def _auto():
            try:
                import sys as _s
                out="zz-out/auto.png"
                if "--out" in _s.argv:
                    i=_s.argv.index("--out"); out=_s.argv[i+1] if i+1<len(_s.argv) else out
                fig=plt.gcf(); fig.subplots_adjust(left=0.07,bottom=0.12,right=0.98,top=0.95)
                fig.savefig(out,dpi=120); print(f"Wrote: {out}")
            except Exception as e:
                print(f"[WARN] auto-save failed: {e}")
        atexit.register(_auto)
    except Exception:
        pass
# === [/PASS5B-SHIM] ===
""".lstrip()
fail_list=pathlib.Path("zz-out/homog_cli_fail_list.txt")
targets=[pathlib.Path(l.strip()) for l in fail_list.read_text().splitlines()
         if l.strip().startswith(("zz-scripts/chapter06/","zz-scripts/chapter07/","zz-scripts/chapter09/"))]
for p in targets:
    s=p.read_text(encoding="utf-8",errors="replace")
    if marker_open in s:
        print(f"[SKIP] Guard déjà présent: {p}")
        continue
    ins=0
    m=re.match(r'(?s)\A(\#\!.*\n)?(\#.*coding[:=].*\n)?(from __future__.*\n)?',s)
    if m: ins=m.end()
    dm=re.match(r'(?s)\A((?:\#\!.*\n)?(?:\#.*coding[:=].*\n)?(?:from __future__.*\n)?)([ \t]*[ru]?["\']{3}.*?["\']{3}\s*\n)',s)
    if dm: ins=len(dm.group(1)+dm.group(2))
    s2=s[:ins]+shim+s[ins:]
    p.write_text(s2,encoding="utf-8")
    print(f"[OK] Guard PASS5B inséré: {p}")
PY
  "$INVENTORY"
fi

echo "[PASS11c] Terminé."
