#!/usr/bin/env bash
# source POSIX copy helper (safe_cp)
. "$(dirname "$0")/lib_posix_cp.sh" 2>/dev/null || . "/home/jplal/MCGT/tools/lib_posix_cp.sh" 2>/dev/null

set -euo pipefail

echo "[PASS7-QF] Purge tight_layout (ch10) + shim inspect_topk_residuals + re-scan"

S="zz-scripts/chapter10"
REPORT_TXT="zz-out/homog_cli_inventory_pass4.txt"

mkdir -p zz-out

###############################################################################
# 1) Purge robuste tight_layout UNIQUEMENT dans chapter10
#    - plt.tight_layout(rect=[l,b,r,t]) -> fig.subplots_adjust(left=l,bottom=b,right=r,top=t)
#    - fig.tight_layout(rect=[...])     -> fig.subplots_adjust(...)
#    - plt.tight_layout()               -> fig=plt.gcf(); fig.subplots_adjust(left=0.07,bottom=0.12,right=0.98,top=0.95)
###############################################################################
echo "[PASS7-QF] Purge tight_layout dans $S ..."
while IFS= read -r -d '' f; do
  cp -n "$f" "$f.pass7bak" 2>/dev/null || true

  # A) fig.tight_layout(rect=[l,b,r,t]) -> subplots_adjust
  perl -0777 -pe '
    s/\bfig\.tight_layout\(\s*rect\s*=\s*\[\s*([^,]+)\s*,\s*([^,]+)\s*,\s*([^,]+)\s*,\s*([^\]]+)\s*\]\s*\)/
      "fig.subplots_adjust(left=".$1.",bottom=".$2.",right=".$3.",top=".$4.")"/sge;
  ' -i "$f"

  # B) plt.tight_layout(rect=[l,b,r,t]) -> subplots_adjust
  perl -0777 -pe '
    s/\bplt\.tight_layout\(\s*rect\s*=\s*\[\s*([^,]+)\s*,\s*([^,]+)\s*,\s*([^,]+)\s*,\s*([^\]]+)\s*\]\s*\)/
      "fig=plt.gcf(); fig.subplots_adjust(left=".$1.",bottom=".$2.",right=".$3.",top=".$4.")"/sge;
  ' -i "$f"

  # C) appels simples à tight_layout() -> subplots_adjust défaut
  perl -0777 -pe '
    s/\b(?:plt|fig)\.tight_layout\(\s*\)/fig=plt.gcf(); fig.subplots_adjust(left=0.07,bottom=0.12,right=0.98,top=0.95)/sg;
  ' -i "$f"
done < <(find "$S" -maxdepth 1 -type f -name "*.py" -print0)

# Sanity check local (hors commentaires)
viol=$(awk '/[[:alnum:]_]\.tight_layout\(/ && $0 !~ /^[[:space:]]*#/{print FILENAME ":" FNR ":" $0}' $(find "$S" -maxdepth 1 -name "*.py") || true)
if [[ -n "${viol}" ]]; then
  echo "[WARN] Appels *.tight_layout restants :"; echo "$viol"
else
  echo "[OK] Aucune occurrence active de *.tight_layout dans chapter10."
fi

###############################################################################
# 2) Shim idempotent pour zz-scripts/chapter10/inspect_topk_residuals.py
###############################################################################
F="$S/inspect_topk_residuals.py"
if [[ -f "$F" ]]; then
  echo "[PASS7-QF] Shim CLI minimal pour $(basename "$F")"
  python3 - <<'PY'
import pathlib, re, sys

p = pathlib.Path("zz-scripts/chapter10/inspect_topk_residuals.py")
s = p.read_text(encoding="utf-8", errors="replace")

MARK_O = "# === [PASS7QF-SHIM] ==="
MARK_C = "# === [/PASS7QF-SHIM] ==="

if MARK_O in s and MARK_C in s:
    print("[INFO] Shim déjà présent (idempotent).")
    sys.exit(0)

# insertion après shebang/encoding/__future__/docstring
def insert_pos(txt: str) -> int:
    i = 0
    if txt.startswith("#!"):
        i = txt.find("\n") + 1
    # encodage
    m = re.match(r'([^\n]*coding[:=].*\n)', txt[i:i+200], re.I)
    if m: i += m.end()
    # __future__
    for m in re.finditer(r'from __future__ import .*\n', txt[i:]):
        i = i + m.end()
    # docstring de tête
    m = re.match(r'\s*(?P<q>["\']{3})(?s:.*?)(?P=q)\s*\n', txt[i:])
    if m: i = i + m.end()
    return i

shim = r"""
# === [PASS7QF-SHIM] ===
# Shim minimal : --help retourne immédiatement, --out force Agg sans show bloquant.
import os, sys, atexit
if any(x in sys.argv for x in ("-h","--help")):
    import argparse
    argparse.ArgumentParser(add_help=True, allow_abbrev=False).print_help()
    raise SystemExit(0)
if any(arg=="--out" or arg.startswith("--out=") for arg in sys.argv):
    os.environ.setdefault("MPLBACKEND", "Agg")
    try:
        import matplotlib.pyplot as plt
        @atexit.register
        def _auto_save():
            path = None
            for a in sys.argv:
                if a.startswith("--out="): path = a.split("=",1)[1]
            if not path:
                # parse --out VALUE
                for i,a in enumerate(sys.argv):
                    if a=="--out" and i+1 < len(sys.argv):
                        path = sys.argv[i+1]; break
            if path:
                try:
                    fig = plt.gcf()
                    fig.subplots_adjust(left=0.07,bottom=0.12,right=0.98,top=0.95)
                    fig.savefig(path, dpi=120)
                    print(f"[PASS7QF] Wrote: {path}")
                except Exception as e:
                    print(f"[PASS7QF] WARN: autosave failed: {e}")
    except Exception:
        pass
# === [/PASS7QF-SHIM] ===
""".lstrip("\n")

i = insert_pos(s)
s2 = s[:i] + shim + s[i:]
p.write_text(s2, encoding="utf-8")
print("[OK] Shim inséré.")
PY
else
  echo "[SKIP] $F introuvable (rien à shimer)."
fi

###############################################################################
# 3) Smoke ch10 + inventaire v4 + résumé
###############################################################################
if [[ -x tools/ch10_smoke.sh ]]; then
  echo "[PASS7-QF] Smoke ch10…"
  tools/ch10_smoke.sh || true
fi

if [[ -x tools/homog_pass4_cli_inventory_safe_v4.sh ]]; then
  echo "[PASS7-QF] Inventaire pass4-safe v4…"
  tools/homog_pass4_cli_inventory_safe_v4.sh
fi

echo
echo "=== Résumé (fin du rapport) ==="
tail -n 12 "$REPORT_TXT" || true
