[solver]
name = camb      # camb | class (doit exister dans $PATH)

[cosmologie]
h0 = 67.36      # km s^-1 Mpc^-1
ombh2 = 0.02237
omch2 = 0.1200
omk = 0.0
tau = 0.0544
mnu_ev = 0.06       # Somme des masses de neutrinos (eV)
as0 = 2.10e-9
ns0 = 0.9649

[scan]
cs2_param = 1.0
k0 = 0.10       # h Mpc^-1 (largeur gaussienne, échelle de référence)
delta_phi_param = 5.0e-3     # amplitude des CI (k→0)
decay = 0.1        # CI ∝ exp(-(k/k_split)^2), avec k_split = x_split (cf. [segmentation])
phi0_init = 1.0
phi_inf = 1.5
a_char = 0.10
m_phi_ev = 1.0e-33    # eV
m_eff_const_ev = 1.0e-33    # eV

[grille1D]
k_min_hmpc = 1.0e-4     # h Mpc^-1
k_max_hmpc = 1.0e+1
dlog_k = 0.01
n_k = 0          # 0 ⇒ calculé depuis dlog_k et bornes
x_split = 0.01
a_split = 0.01
split = 0.01
k_min = 1.0e-4
k_max = 1.0e+1

[grille2D]
a_min = 0.05
a_max = 1.00
n_a = 20

[segmentation]
x_split_hmpc = 0.02       # h Mpc^-1 (séparation low/high pour algos dérivés)
x_split = 0.01

[lissage]
derivative_window = 7
derivative_polyorder = 3

[tolerances]
primary = 0.01
order2 = 0.10

[dynamique_phi]
a_eq = 0.33       # ~1/(1+z_eq) ; z_eq≈3400
freeze_scale = 1.0e5      # amortissement progressif
phi0 = 1.0e-5     # Φ(k≈0, a≪a_eq)

[plot]
vmin_log = 1.0e-9     # pour LogNorm
vmax_log = 5.0e-5
cmap = viridis    # palette matplotlib standard (fallback robuste)

[sorties]
output_cs2 = zz-data/chapter07/07_cs2_matrix.csv
output_delta_phi = zz-data/chapter07/07_delta_phi_matrix.csv
output_dcs2_dk = zz-data/chapter07/07_dcs2_dk.csv
output_ddphi_dk = zz-data/chapter07/07_ddelta_phi_dk.csv

[format]
comment_char = #
csv_separator = ,

[repro]
write_meta_git_hash = true
random_seed = 123456

[grid]
x_split = 0.01
a_split = 0.01
split = 0.01
k_min_hmpc = 1.0e-4
k_max_hmpc = 1.0e+1
dlog_k = 0.01
n_k = 0
