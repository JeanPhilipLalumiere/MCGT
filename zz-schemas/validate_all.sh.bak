#!/usr/bin/env bash
set -Eeuo pipefail
# Exécuter depuis la racine du repo (le script est rangé dans zz-schemas/)
cd "$(dirname "$0")/.."  # -> racine

ok=0; bad=0
pairs=(
  "zz-schemas/02_spec_spectrum.schema.json zz-data/chapter02/02_primordial_spectrum_spec.json"
  "zz-schemas/02_optimal_parameters.schema.json zz-data/chapter02/02_optimal_parameters.json"
  "zz-schemas/03_meta_stability_fR.schema.json zz-data/chapter03/03_fR_stability_meta.json"
  "zz-schemas/05_nucleosynthesis_parameters.schema.json zz-data/chapter05/05_bbn_params.json"
  "zz-schemas/06_cmb_params.schema.json zz-data/chapter06/06_params_cmb.json"
  "zz-schemas/07_meta_perturbations.schema.json zz-data/chapter07/07_perturbations_meta.json"
  "zz-schemas/07_params_perturbations.schema.json zz-data/chapter07/07_perturbations_params.json"
  "zz-schemas/09_best_params.schema.json zz-data/chapter09/09_best_params.json"
  "zz-schemas/09_phases_imrphenom.meta.schema.json zz-data/chapter09/09_phases_imrphenom.meta.json"
  "zz-schemas/metrics_phase_schema.json zz-data/chapter09/09_metrics_phase.json"
  "zz-schemas/mc_config_schema.json zz-data/chapter10/10_mc_config.json"
  "zz-schemas/mc_best_schema.json zz-data/chapter10/10_mc_best.json"
)

for p in "${pairs[@]}"; do
  s="${p%% *}"; i="${p#* }"
  echo "JSON: $i  ↔  $s"
  if python zz-schemas/validate_json.py "$s" "$i"; then
    ((ok++))
  else
    echo "  -> FAIL"
    ((bad++))
  fi
done

echo "JSON summary: ok=$ok bad=$bad"
(( bad == 0 ))  # code de retour: 0 si tout OK, 1 sinon
