#!/usr/bin/env python3
import os
"""Fig. 05 - Invariant adimensionnel I1(T)"""

from pathlib import Path

import matplotlib.pyplot as plt
import pandas as pd

base = Path(__file__).resolve().parents[2]
data_file = base / "zz-data" / "chapter01" / "01_dimensionless_invariants.csv"
output_file = base / "zz-figures" / "chapter01" / "fig_05_I1_vs_T.png"

df = pd.read_csv(data_file)
T = df["T"]
I1 = df["I1"]

plt.figure(dpi=300)
plt.plot(T, I1, color="orange", label=r"$I_1 = P(T)/T$")
plt.xscale("log")
plt.yscale("log")
plt.xlabel("T (Gyr)")
plt.ylabel(r"$I_1$")
plt.title("Fig. 05 - Invariant adimensionnel $I_1$ en fonction de $T$")
plt.grid(True, which="both", ls=":", lw=0.5)
plt.legend()
fig.subplots_adjust(left=0.04, right=0.98, bottom=0.06, top=0.96)
plt.savefig(output_file)

# === MCGT CLI SEED v2 ===
if __name__ == "__main__":
    def _mcgt_cli_seed():
        import os, argparse, sys, traceback
parser = argparse.ArgumentParser(description="Standard CLI seed (non-intrusif).")

parser.add_argument("--outdir", default=os.environ.get("MCGT_OUTDIR", ".ci-out"), help="Dossier de sortie (par défaut: .ci-out)")

parser.add_argument("--dry-run", action="store_true", help="Ne rien écrire, juste afficher les actions.")

parser.add_argument("--seed", type=int, default=None, help="Graine aléatoire (optionnelle).")

parser.add_argument("--force", action="store_true", help="Écraser les sorties existantes si nécessaire.")

parser.add_argument("-v", "--verbose", action="count", default=0, help="Verbosity cumulable (-v, -vv).")

parser.add_argument("--dpi", type=int, default=150, help="Figure DPI (default: 150)")

parser.add_argument("--format", choices=["png","pdf","svg"], default="png", help="Figure format")

parser.add_argument("--transparent", action="store_true", help="Transparent background")

args = parser.parse_args()
try:
            os.makedirs(args.outdir, exist_ok=True)
        os.environ["MCGT_OUTDIR"] = args.outdir
import matplotlib as mpl
        mpl.rcParams["savefig.dpi"] = args.dpi
        mpl.rcParams["savefig.format"] = args.format
        mpl.rcParams["savefig.transparent"] = args.transparent
        except Exception:
            pass
        _main = globals().get("main")
        if callable(_main):
            try:
                _main(args)
            except SystemExit:
                raise
            except Exception as e:
                print(f"[CLI seed] main() a levé: {e}", file=sys.stderr)
                traceback.print_exc()
                sys.exit(1)
    _mcgt_cli_seed()
