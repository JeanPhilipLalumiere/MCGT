`````markdown
# Exigences pour le Chapitre 3 (Stabilité de f(R))

1. **Environnement système**
   * Système : Ubuntu 20.04 (WSL ou natif) ou équivalent Linux  
   * Espace disque : ≥ 200 Mo libre  

2. **Environnement Python**
   * Python ≥ 3.9  
   * Créer et activer un environnement virtuel dédié :
     ```bash
     cd ~/MCGT
     python3 -m venv venv3
     source venv3/bin/activate
     ```
   * Installer les dépendances :
     ```bash
     pip install --upgrade pip
     pip install numpy pandas scipy matplotlib configparser argparse pytest
     ```

3. **Données brutes & scripts d’extraction**
   * **Fichiers jalons et grille**  
     - `zz-data/chapter03/03_ricci_fR_milestones.csv`  
       • Colonnes :  
         • `R_over_R0` : rapport R/R₀ (—)  
         • `f_R`        : f′(R)       (—)  
         • `f_RR`       : f″(R)       (—)  
     * Aucun autre fichier brut n’est requis. *

4. **Structure du dépôt**
````text
MCGT/
├─ 03-stabilite-fR/               # sources LaTeX, GUIDE
├─ zz-data/chapter03/             # CSV générés :
│     03_fR_stability_data.csv
│     03_fR_stability_domain.csv
│     03_fR_stability_boundary.csv
│     03_fR_stability_meta.json
│     03_ricci_fR_milestones.csv
│     03_ricci_fR_vs_z.csv
│     03_ricci_fR_vs_T.csv
├─ zz-scripts/chapter03/          # scripts Python :
│     generate_data_chapter03.py
│     plot_fig01_fR_stability_domain.py … plot_fig08_ricci_fR_vs_T.py
├─ zz-figures/chapter03/          # PNG produits
└─ venv3/                         # environnement virtuel Python
`````

5. **Exécution du pipeline**

   5.1 Génération des données

   ```bash
   source venv3/bin/activate
   python zz-scripts/chapter03/generate_data_chapter03.py --config gw_phase.ini [--npts N] [--dry-run]
   ```

5.2 Tracé des figures

```bash
source venv3/bin/activate
python zz-scripts/chapter03/plot_fig01_fR_stability_domain.py
python zz-scripts/chapter03/plot_fig02_fR_fRR_vs_R.py
python zz-scripts/chapter03/plot_fig03_ms2_R0_vs_R.py
python zz-scripts/chapter03/plot_fig04_fR_fRR_vs_z.py
python zz-scripts/chapter03/plot_fig05_interpolated_milestones.py
python zz-scripts/chapter03/plot_fig06_grid_quality.py
python zz-scripts/chapter03/plot_fig07_ricci_fR_vs_z.py
python zz-scripts/chapter03/plot_fig08_ricci_fR_vs_T.py
```

6. **Compilation LaTeX**

```bash
cd 03-stabilite-fR/
pdflatex -interaction=nonstopmode 03_stabilite_fR_conceptuel.tex
pdflatex -interaction=nonstopmode 03_stabilite_fR_details.tex
```

7. **Tests & validations**

   * Vérifier l’existence et la non-nullité des fichiers CSV dans `zz-data/chapter03/` :

     ```
     03_fR_stability_data.csv
     03_fR_stability_domain.csv
     03_fR_stability_boundary.csv
     03_fR_stability_meta.json
     03_ricci_fR_milestones.csv
     03_ricci_fR_vs_z.csv
     03_ricci_fR_vs_T.csv
     ```
   * S’assurer qu’il n’y a pas de NaN ou Inf dans les CSV.
   * Contrôler :

     * `check_log_spacing(...)` OK pour la grille log-uniforme
     * f\_R > 0 et f\_RR > 0 pour tous les points
     * cohérence de la décroissance de z et T dans les sorties inverses
   * Exécuter `pytest` pour valider les tests unitaires.

8. **Reproductibilité & versioning**

   * Fichier `VERSION` à la racine
   * `CHANGELOG.md` détaillant les évolutions
   * Tag Git pour chaque version majeure
   * HEAD hash enregistré dans `zz-data/chapter03/03_fR_stability_meta.json`

```
