# Exigences pour le Chapitre 9 (Phase & ondes gravitationnelles)

1. **Environnement système**

   * Système : Ubuntu 20.04 (WSL ou natif) ou équivalent Linux
   * Espace disque : ≥ 500 Mo libre

2. **Environnement Python**

   * Python ≥ 3.10
   * Créer et activer un environnement virtuel spécifique :

     ```
     cd ~/MCGT
     python3 -m venv venv9
     source venv9/bin/activate
     ```
   * Installer les dépendances :

     ```
     pip install --upgrade pip
     pip install numpy pandas matplotlib scipy h5py
     pip install jupyterlab        # optionnel, pour exploration interactive
     ```

3. **Données brutes & scripts d’extraction**

   * **Référence GR (IMRPhenom-like)**
     – Fichier attendu : `zz-data/chapter09/09_phases_imrphenom.csv`
     (colonnes : `f_Hz`, `phi_ref`)
     – Extraction/normalisation :
     `zz-scripts/chapter09/extract_phase_phenom.py` → `zz-data/chapter09/09_phases_imrphenom.csv`
   * **Phase MCGT (pipeline)**
     – Fichiers pipeline : `09_phases_mcgt.prepoly.csv` (brut), `09_phases_mcgt.csv` (final)
     – Génération : `zz-scripts/chapter09/generate_chapter09_data.py` → `zz-data/chapter09/09_phases_mcgt.prepoly.csv` + `09_phase_diff.csv`
   * **Correction polynomiale / rebranch**
     – Scripts :
     `zz-scripts/chapter09/opt_poly_rebranch.py` (grid search),
     `zz-scripts/chapter09/apply_poly_unwrap_rebranch.py` (appliquer correction),
     `zz-scripts/chapter09/check_p95_methods.py` (diagnostics raw/unwrap/rebranch)
     – Métriques et méta : `zz-data/chapter09/09_metrics_phase.json`
   * **Milestones / f\_peak**
     – Fichier : `zz-data/chapter09/09_comparison_milestones.csv`
     (colonnes typiques : `event`, `f_Hz`, `phi_ref_at_fpeak`, `phi_mcgt_at_fpeak`, `obs_phase`, `sigma_phase`, `classe`)

4. **Structure du dépôt**

```text
MCGT/
├─ 09-gravitational-waves-phase/      # sources LaTeX, GUIDE (chapter tex)
├─ zz-data/chapter09/                 # .csv, .json générés
│   ├─ 09_phases_imrphenom.csv
│   ├─ 09_phases_mcgt.prepoly.csv
│   ├─ 09_phases_mcgt.csv
│   ├─ 09_phase_diff.csv
│   ├─ 09_metrics_phase.json
│   ├─ 09_best_params.json
│   └─ 09_comparison_milestones.csv
├─ zz-scripts/chapter09/              # scripts de génération et tracé
│   ├─ extract_phase_phenom.py
│   ├─ generate_chapter09_data.py
│   ├─ generate_phase_mcgtraw.py
│   ├─ opt_poly_rebranch.py
│   ├─ apply_poly_unwrap_rebranch.py
│   ├─ check_p95_methods.py
│   ├─ plot_fig01_phase_overlay.py
│   ├─ plot_fig02_residual_phase.py
│   ├─ plot_fig03_hist_absdphi_20_300.py
│   ├─ plot_fig04_absdphi_milestones_vs_f.py
│   └─ plot_fig05_scatter_phi_at_fpeak.py
├─ zz-figures/chapter09/              # figures produites
│   ├─ fig_01_phase_overlay.png
│   ├─ fig_01_phase_overlay.final.png
│   ├─ fig_02_residual_phase.png
│   ├─ fig_03_hist_absdphi_20_300.png
│   ├─ fig_04_milestones_absdphi_vs_f.png
│   ├─ fig_05_scatter_phi_at_fpeak.png
│   ├─ p95_check_control.png
│   └─ p95_checks/                     # outputs de diagnostic (supplements)
│       ├─ supp_raw_unwrap_rebranch.png
│       └─ supp_raw_unwrap_rebranch.pdf
└─ venv9/                             # environnement virtuel Python
```

5. **Exécution du pipeline (séquence type)**

6. Activer l'environnement :

   ```bash
   source venv9/bin/activate
   ```

7. (Optionnel) Regénérer la référence IMRPhenom :

   ```bash
   python zz-scripts/chapter09/extract_phase_phenom.py \
     --out zz-data/chapter09/09_phases_imrphenom.csv
   ```

8. Générer la phase MCGT « prepoly » + Δφ :

   ```bash
   python zz-scripts/chapter09/generate_chapter09_data.py \
     --ref zz-data/chapter09/09_phases_imrphenom.csv \
     --out-prepoly zz-data/chapter09/09_phases_mcgt.prepoly.csv \
     --out-diff    zz-data/chapter09/09_phase_diff.csv \
     --log-level INFO
   ```

9. Optimiser / appliquer la correction (exemple) :

   ```bash
   python zz-scripts/chapter09/opt_poly_rebranch.py \
     --csv zz-data/chapter09/09_phases_mcgt.prepoly.csv \
     --meta zz-data/chapter09/09_metrics_phase.json \
     --fit-window 30 250 --metrics-window 20 300 \
     --degrees 3 4 5 --bases log10 hz --k-range -100 100 \
     --out-csv  zz-data/chapter09/09_phases_mcgt.csv \
     --out-best zz-data/chapter09/09_best_params.json \
     --backup --log-level INFO
   ```

   ou appliquer directement un poly choisi :

   ```bash
   python zz-scripts/chapter09/apply_poly_unwrap_rebranch.py \
     --csv zz-data/chapter09/09_phases_mcgt.prepoly.csv \
     --degree 5 --basis log10 --fit-window 30 250 --metrics-window 20 300 \
     --backup --log-level INFO
   ```

10. Diagnostics p95 / comparaisons (supplément) :

    ```bash
    python zz-scripts/chapter09/check_p95_methods.py \
      --csv zz-data/chapter09/09_phases_mcgt.csv \
      --window 20 300 --bins 30 50 80 --plot --out-dir zz-figures/chapter09/p95_methods --xscale log
    ```

11. Tracer figures finales :

    ```bash
    python zz-scripts/chapter09/tracer_fig01_phase_overlay.py \
      --csv  zz-data/chapter09/09_phases_mcgt.csv \
      --meta zz-data/chapter09/09_metrics_phase.json \
      --out  zz-figures/chapter09/fig_01_phase_overlay.png \
      --shade 20 300 --show-residual \
      --anchor-policy if-not-calibrated --legend-width-frac 0.50 \
      --dpi 300 --save-pdf --log-level INFO

    python zz-scripts/chapter09/tracer_fig02_residual_phase.py \
      --csv zz-data/chapter09/09_phases_mcgt.csv \
      --out zz-figures/chapter09/fig_02_residual_phase.png \
      --bands 20 300 300 1000 1000 2000 --dpi 300 --marker-size 3 --line-width 0.9 \
      --gap-thresh-log10 0.12 --log-level INFO

    python zz-scripts/chapter09/tracer_fig03_hist_absdphi_20_300.py \
      --csv zz-data/chapter09/09_phases_mcgt.csv \
      --out zz-figures/chapter09/fig_03_hist_absdphi_20_300.png \
      --bins 60 --window 20 300 --xscale log --dpi 300 --log-level INFO

    python zz-scripts/chapter09/tracer_fig04_milestones_absdphi_vs_f.py \
      --diff zz-data/chapter09/09_phase_diff.csv \
      --milestones zz-data/chapter09/09_comparison_milestones.csv \
      --out zz-figures/chapter09/fig_04_milestones_absdphi_vs_f.png \
      --dpi 300 --with_errorbar --log-level INFO

    python zz-scripts/chapter09/tracer_fig05_scatter_phi_at_fpeak.py \
      --milestones zz-data/chapter09/09_comparison_milestones.csv \
      --out zz-figures/chapter09/fig_05_scatter_phi_at_fpeak.png \
      --dpi 300 --log-level INFO
    ```

12. **Compilation LaTeX**

```bash
cd 09-gravitational-waves-phase/
pdflatex -interaction=nonstopmode 09_phase_ondes_grav_conceptuel.tex
pdflatex -interaction=nonstopmode 09_phase_ondes_grav_details.tex
```

7. **Tests & validations**

   * Vérifier l’existence et la non-nullité des fichiers dans `zz-data/chapter09/` :

     ```
     09_phases_imrphenom.csv
     09_phases_mcgt.prepoly.csv
     09_phases_mcgt.csv
     09_phase_diff.csv
     09_metrics_phase.json
     09_best_params.json
     09_comparison_milestones.csv
     ```
   * S’assurer qu’il n’y a pas de `NaN` ou `Inf` dans `09_phases_mcgt.csv` et `09_phase_diff.csv`.
   * Vérifier qu’il n’y a pas de duplicats en `f_Hz` (pas de fréquences répétées).
   * Vérifier la grille de fréquences (min delta f raisonnable, couverture attendue).
   * Validation de la variante et métriques actives dans `09_metrics_phase.json` :

     * `metrics_active.variant` doit être la colonne tracée (ex. `"phi_mcgt"` ou `"phi_mcgt_cal"`).
     * `metrics_active.rebranch_k` doit correspondre au k médian utilisé pour rebranch.
     * `mean_abs_20_300`, `p95_abs_20_300`, `max_abs_20_300`, `n_20_300` doivent refléter |Δφ| principal (après rebranch\_k) sur 20–300 Hz.
   * Vérification rapide en python (exemple) :

     ```bash
     python - <<'PY'
     import numpy as np, pandas as pd, json
     df=pd.read_csv("zz-data/chapter09/09_phases_mcgt.csv").sort_values("f_Hz")
     f=df.f_Hz.to_numpy(float); mask=(f>=20)&(f<=300)
     for col in ("phi_mcgt","phi_mcgt_cal","phi_mcgt_raw"):
         if col in df.columns:
             phi_m=df[col].to_numpy(float); variant=col; break
     phi_r=df.phi_ref.to_numpy(float)
     two_pi=2*np.pi
     k=int(np.round(np.nanmedian((phi_m[mask]-phi_r[mask])/two_pi))) if mask.any() else 0
     princ=np.abs(((phi_m-k*two_pi-phi_r+np.pi)%(2*np.pi))-np.pi)[mask]
     print("variant=",variant,"k=",k,"n=",princ.size)
     print("mean,p95,max=",princ.mean(), np.percentile(princ,95), princ.max())
     print("JSON:", json.load(open('zz-data/chapter09/09_metrics_phase.json')).get('metrics_active',{}))
     PY
     ```
   * Diagnostics supplémentaires (p95 methods) : exécuter `check_p95_methods.py` et vérifier les figures dans `zz-figures/chapter09/p95_methods` et `p95_checks` (supplement).
   * Pour les figures :

     * Ouvrir chaque PNG/PDF dans `zz-figures/chapter09/` pour contrôle visuel.
     * Vérifier que la superposition φ\_ref vs φ\_mcgt (fig\_01) est cohérente après l’ancrage visuel (anchor-policy) et que les métriques sont calculées **sans** l’ancrage visuel (metrics sur séries non ancrées après rebranch\_k).
     * Vérifier que les p95 indiqués sur les figures correspondent à `09_metrics_phase.json`.
   * Tests statistiques souhaités pour publication (recommandé) :

     * Bootstrap du p95 sur la fenêtre 20–300 Hz (1000 itérations) → intervalles de confiance.
     * Inspection des windows locales (sliding windows) pour détecter multimodalité de k (si present, investiguer).
     * Vérifier qu’aucune valeur ≤ 0 n’est tracée en échelle log (remplacer par eps pour affichage si nécessaire).

---

## FIN – EXIGENCES CHAPITRE 9
