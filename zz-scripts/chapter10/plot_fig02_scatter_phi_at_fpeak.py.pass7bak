#!/usr/bin/env python3
from __future__ import annotations
import argparse, numpy as np, pandas as pd, matplotlib.pyplot as plt
TWOPI = 2.0 * np.pi
def wrap_pi(x): return (x + np.pi) % TWOPI - np.pi
def circ_diff(a,b): return wrap_pi(b - a)
def circ_mean_rad(ang): return float(np.angle(np.mean(np.exp(1j*ang))))
def circ_std_rad(ang):
    R = np.abs(np.mean(np.exp(1j*ang))); return float(np.sqrt(max(0.0, -2.0*np.log(max(R,1e-12)))))
def bootstrap_circ_mean_ci(angles,B=1000,seed=12345):
    n=len(angles); 
    if n==0 or B<=0: th=circ_mean_rad(angles); return th, th, th
    rng=np.random.default_rng(seed); theta_hat=circ_mean_rad(angles)
    deltas=np.empty(B)
    for b in range(B):
        idx=rng.integers(0,n,size=n); th_b=circ_mean_rad(angles[idx]); deltas[b]=wrap_pi(th_b-theta_hat)
    lo,hi=np.percentile(deltas,[2.5,97.5]); 
    return float(theta_hat), float(wrap_pi(theta_hat+lo)), float(wrap_pi(theta_hat+hi))
def detect_column(df, hint, cands):
    if hint and hint in df.columns: return hint
    for c in cands:
        if c in df.columns: return c
    low=[c.lower() for c in df.columns]
    for cand in cands:
        if cand.lower() in low: return df.columns[low.index(cand.lower())]
    raise KeyError(f"Colonne manquante parmi: {cands}")
def main():
    p=argparse.ArgumentParser(description="Scatter φ_ref(f_peak) vs φ_MCGT(f_peak)")
    p.add_argument("--results", required=True); p.add_argument("--out", required=True)
    p.add_argument("--x-col", default=None); p.add_argument("--y-col", default=None)
    p.add_argument("--group-col", default=None)
    p.add_argument("--title", default="φ_ref(f_peak) vs φ_MCGT(f_peak)")
    p.add_argument("--dpi", type=int, default=300)
    p.add_argument("--alpha", type=float, default=0.7); p.add_argument("--point-size", type=float, default=8.0)
    p.add_argument("--cmap", default="viridis"); p.add_argument("--with-hexbin", action="store_true")
    p.add_argument("--hexbin-gridsize", type=int, default=40); p.add_argument("--hexbin-alpha", type=float, default=0.35)
    p.add_argument("--clip-pi", action="store_true"); p.add_argument("--pi-ticks", action="store_true")
    p.add_argument("--p95-ref", type=float, default=float(np.pi/4))
    p.add_argument("--annotate-top-k", type=int, default=0)
    p.add_argument("--boot-ci", type=int, default=200); p.add_argument("--seed", type=int, default=12345)
    args=p.parse_args()
    df=pd.read_csv(args.results)
    xcol=detect_column(df,args.x_col,["phi_ref_fpeak","phi_ref","phi_ref_f_peak","phi_ref_at_fpeak","phi_reference"])
    ycol=detect_column(df,args.y_col,["phi_mcgt_fpeak","phi_mcgt","phi_mcg","phi_mcg_at_fpeak","phi_MCGT"])
    sub=df[[xcol,ycol]].dropna().astype(float).copy(); x=sub[xcol].values; y=sub[ycol].values
    dphi=circ_diff(x,y); abs_d=np.abs(dphi); N=len(abs_d)
    mean_abs=float(np.mean(abs_d)); median_abs=float(np.median(abs_d)); p95_abs=float(np.percentile(abs_d,95))
    max_abs=float(np.max(abs_d)); frac_below=float(np.mean(abs_d<args.p95_ref))
    cmean_hat, ci_lo, ci_hi=bootstrap_circ_mean_ci(dphi, B=args.boot_ci, seed=args.seed)
    half_arc=0.5*float(np.abs(((ci_hi-ci_lo)+np.pi)%(2*np.pi)-np.pi))
    plt.style.use("classic"); fig, ax=plt.subplots(figsize=(8,8))
    if args.with_hexbin:
        ax.hexbin(x,y,gridsize=args.hexbin_gridsize,mincnt=1,cmap="Greys",alpha=args.hexbin_alpha,linewidths=0,zorder=0)
    sc=ax.scatter(x,y,c=abs_d,s=args.point_size,alpha=args.alpha,cmap=args.cmap,edgecolor="none",zorder=1)
    xmin,xmax=np.min(x),np.max(x); ymin,ymax=np.min(y),np.max(y)
    if args.clip_pi: ax.set_xlim(-np.pi,np.pi); ax.set_ylim(-np.pi,np.pi)
    else:
        pad_x=0.03*(xmax-xmin) if xmax>xmin else 0.1; pad_y=0.03*(ymax-ymin) if ymax>ymin else 0.1
        ax.set_xlim(xmin-pad_x,xmax+pad_x); ax.set_ylim(ymin-pad_y,ymax+pad_y)
    ax.set_aspect("equal", adjustable="box"); lo=min(ax.get_xlim()[0],ax.get_ylim()[0]); hi=max(ax.get_xlim()[1],ax.get_ylim()[1])
    ax.plot([lo,hi],[lo,hi],color="gray",linestyle="--",lw=1.2,zorder=2)
    ax.set_xlabel(f"{xcol} [rad]"); ax.set_ylabel(f"{ycol} [rad]"); ax.set_title(args.title,fontsize=15)
    cbar=fig.colorbar(sc,ax=ax); cbar.set_label(r"$|\Delta\phi|$ [rad]")
    if args.pi_ticks:
        ticks=[0.0,np.pi/4,np.pi/2,3*np.pi/4,np.pi]; cbar.set_ticks(ticks); cbar.set_ticklabels(["0", r"$\pi/4$", r"$\pi/2$", r"$3\pi/4$", r"$\pi$"])
    stat_lines=[f"N = {N}",f"|Δφ| mean = {mean_abs:.3f}",f"median = {median_abs:.3f}",f"p95 = {p95_abs:.3f}",
               f"max = {max_abs:.3f}",f"|Δφ| < {args.p95_ref:.4f} : {100*frac_below:.2f}%",
               f"circ-mean(Δφ) = {cmean_hat:.3f} rad",f"95% CI ≈ {cmean_hat:.3f} ± {half_arc:.3f} rad"]
    ax.text(0.02,0.98,"\n".join(stat_lines),transform=ax.transAxes,fontsize=9,va="top",ha="left",
            bbox=dict(boxstyle="round",fc="white",ec="black",lw=1,alpha=0.95),zorder=5)
    fig.text(0.5,0.02,r"$\Delta\phi$ circulaire (b − a mod $2\pi \rightarrow [-\pi,\pi)$).",ha="center",fontsize=9)
    plt.tight_layout(rect=[0,0.04,1,0.98]); fig.savefig(args.out,dpi=args.dpi); print(f"Wrote: {args.out}")
if __name__=="__main__": main()
