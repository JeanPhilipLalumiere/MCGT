# Exigences pour le Chapitre 10 (Monte-Carlo global 8D)

1. **Environnement système**

   * Système : Ubuntu 20.04 (WSL ou natif) ou équivalent Linux
   * Espace disque : ≥ 500 Mo libre

2. **Environnement Python**

   * Python ≥ 3.10
   * Créer et activer un environnement virtuel spécifique :

     ```
     cd ~/MCGT
     python3 -m venv venv10
     source venv10/bin/activate
     ```
   * Installer les dépendances :

     ```
     pip install --upgrade pip
     pip install numpy pandas matplotlib scipy
     pip install jupyterlab        # optionnel, pour exploration interactive
     ```

3. **Données brutes & scripts d’extraction**

   * **Configuration & échantillons 8D**
     – Fichiers produits : `zz-data/chapter10/10_mc_config.json`, `10_mc_samples.csv`
     – Génération :
     `zz-scripts/chapter10/generate_8d_samples.py` → `10_mc_samples.csv`
     (paramètres, bornes & pas définis par `10_mc_config.json`)
   * **Évaluation des métriques (p95 sur 20–300 Hz)**
     – Fichiers produits : `10_mc_results.csv`, `10_mc_results.agg.csv`
     – Génération :
     `zz-scripts/chapter10/evaluate_principal_metrics_20_300.py`
   * **Version cohérente MCGT (moyenne circulaire)**
     – Fichiers produits : `10_mc_results.circ.csv`, `10_mc_results.circ.agg.csv`
     – Recalcul :
     `zz-scripts/chapter10/recompute_p95_circular.py` (col. `p95_20_300_recalc`)
   * **Jalons / f\_peak (optionnel)**
     – Fichiers : `10_mc_results.circ.with_fpeak.csv`, `10_mc_jalons_eval.csv`
     – Ajout des colonnes f\_peak / φ :
     `zz-scripts/chapter10/add_phi_at_fpeak.py`
   * **Bootstrap / top-k (optionnel)**
     – Fichiers : `10_mc_best.json`, `10_mc_best_bootstrap.json`
     – Génération :
     `zz-scripts/chapter10/bootstrap_topk_p95.py`
   * **Diagnostics de cohérence**
     – Scripts :
     `zz-scripts/chapter10/check_metrics_consistency.py`,
     `zz-scripts/chapter10/inspect_topk_residuals.py`,
     `zz-scripts/chapter10/qc_wrapped_vs_unwrapped.py`,
     `zz-scripts/chapter10/diag_phi_at_fpeak.py`

4. **Structure du dépôt**

```text
MCGT/
├─ 10-monte-carlo-global-8d/     # sources LaTeX, GUIDE (chapter tex)
│  ├─ 10_monte_carlo_global_conceptuel.tex
│  ├─ 10_monte_carlo_global_details.tex
│  └─ CHAPTER10_GUIDE.txt
├─ zz-data/chapter10/        # .csv, .json générés
│  ├─ 10_mc_config.json
│  ├─ 10_mc_samples.csv
│  ├─ 10_mc_results.csv
│  ├─ 10_mc_results.agg.csv
│  ├─ 10_mc_results.circ.csv
│  ├─ 10_mc_results.circ.agg.csv
│  ├─ 10_mc_results.circ.with_fpeak.csv
│  ├─ 10_mc_jalons_eval.csv
│  ├─ 10_mc_best.json
│  └─ 10_mc_best_bootstrap.json
├─ zz-scripts/chapter10/        # scripts de génération et tracé
│  ├─ generate_chapter10_data.py
│  ├─ generate_8d_samples.py
│  ├─ evaluate_principal_metrics_20_300.py
│  ├─ recompute_p95_circular.py
│  ├─ add_phi_at_fpeak.py
│  ├─ bootstrap_topk_p95.py
│  ├─ check_metrics_consistency.py
│  ├─ inspect_topk_residuals.py
│  ├─ qc_wrapped_vs_unwrapped.py
│  ├─ diag_phi_at_fpeak.py
│  ├─ plot_fig01_iso_p95_map.py
│  ├─ plot_fig02_scatter_phi_at_fpeak.py
│  ├─ plot_fig03_convergence_p95_vs_n.py
│  ├─ plot_fig03b_coverage_bootstrap_vs_n.py
│  ├─ plot_fig04_scatter_p95_recalc_vs_orig.py
│  ├─ plot_fig05_hist_cdf_metrics.py
│  ├─ plot_fig06_residual_map.py
│  └─ plot_fig07_synthesis.py
├─ zz-figures/chapter10/        # figures produites
│  ├─ fig_01_iso_p95_map.png
│  ├─ fig_02_scatter_phi_at_fpeak.png
│  ├─ fig_03_convergence_p95_vs_n.png
│  ├─ fig_03b_coverage_bootstrap_vs_n_hires.png
│  ├─ fig_04_scatter_p95_recalc_vs_orig.png
│  ├─ fig_05_hist_cdf_metrics.png
│  ├─ fig_06_heatmap_absdp95_m1m2.png
│  └─ fig_07_synthesis_compare.png
└─ venv10/                       # environnement virtuel Python
```

5. **Exécution du pipeline (séquence type)**

6. Activer l'environnement :

   ```bash
   source venv10/bin/activate
   ```

7. (Optionnel) Générer configuration & échantillons 8D :

   ```bash
   python zz-scripts/chapter10/generate_8d_samples.py \
     --config zz-data/chapter10/10_mc_config.json \
     --out    zz-data/chapter10/10_mc_samples.csv
   ```

8. Évaluer les métriques (p95 sur 20–300 Hz) :

   ```bash
   python zz-scripts/chapter10/evaluate_principal_metrics_20_300.py \
     --samples  zz-data/chapter10/10_mc_samples.csv \
     --config   zz-data/chapter10/10_mc_config.json \
     --out      zz-data/chapter10/10_mc_results.csv \
     --out-agg  zz-data/chapter10/10_mc_results.agg.csv
   ```

9. Recalcul « circulaire » + f\_peak (optionnel) :

   ```bash
   python zz-scripts/chapter10/recompute_p95_circular.py \
     --in  zz-data/chapter10/10_mc_results.csv \
     --out zz-data/chapter10/10_mc_results.circ.csv

   python zz-scripts/chapter10/add_phi_at_fpeak.py \
     --in  zz-data/chapter10/10_mc_results.circ.csv \
     --out zz-data/chapter10/10_mc_results.circ.with_fpeak.csv
   ```

10. Bootstrap / top-k (optionnel) :

    ```bash
    python zz-scripts/chapter10/bootstrap_topk_p95.py \
      --in  zz-data/chapter10/10_mc_results.circ.csv \
      --out-best  zz-data/chapter10/10_mc_best.json \
      --out-boot  zz-data/chapter10/10_mc_best_bootstrap.json
    ```

11. Tracer figures finales :

    ```bash
    python zz-scripts/chapter10/plot_fig01_iso_p95_map.py \
      --results zz-data/chapter10/10_mc_results.circ.csv \
      --p95-col p95_20_300_recalc \
      --out zz-figures/chapter10/fig_01_iso_p95_map.png --dpi 300

    python zz-scripts/chapter10/plot_fig02_scatter_phi_at_fpeak.py \
      --jalons zz-data/chapter10/10_mc_jalons_eval.csv \
      --out    zz-figures/chapter10/10_fig_02_scatter_phi_at_fpeak.png --dpi 300

    python zz-scripts/chapter10/plot_fig03_convergence_p95_vs_n.py \
      --results zz-data/chapter10/10_mc_results.circ.csv \
      --out zz-figures/chapter10/10_fig_03_convergence_p95_vs_n.png --dpi 300

    python zz-scripts/chapter10/plot_fig03b_coverage_bootstrap_vs_n.py \
      --results zz-data/chapter10/10_mc_results.circ.csv \
      --p95-col p95_20_300_recalc \
      --out zz-figures/chapter10/10_fig_03b_coverage_bootstrap_vs_n_hires.png \
      --hires2000 --M 2000 --seed 12345 --dpi 300 \
      --minN 100 --npoints 10 --ymin-coverage 0.88 --ymax-coverage 1.01

    python zz-scripts/chapter10/plot_fig04_scatter_p95_recalc_vs_orig.py \
      --results zz-data/chapter10/10_mc_results.circ.csv \
      --out zz-figures/chapter10/10_fig_04_scatter_p95_recalc_vs_orig.png --dpi 300

    python zz-scripts/chapter10/plot_fig05_hist_cdf_metrics.py \
      --results zz-data/chapter10/10_mc_results.circ.csv \
      --p95-col p95_20_300_recalc \
      --out zz-figures/chapter10/10_fig_05_hist_cdf_metrics.png --dpi 300

    python zz-scripts/chapter10/plot_fig06_residual_map.py \
      --results zz-data/chapter10/10_mc_results.circ.csv \
      --metric dp95 --abs --m1-col m1 --m2-col m2 \
      --orig-col p95_20_300 --recalc-col p95_20_300_recalc \
      --gridsize 36 --mincnt 3 --cmap viridis --dpi 300 \
      --out zz-figures/chapter10/10_fig_06_heatmap_absdp95_m1m2.png

    python zz-scripts/chapter10/plot_fig07_synthesis.py \
      --manifest-a zz-figures/chapter10/fig_03b_coverage_bootstrap_vs_n.manifest.json \
      --label-a "Percentile (outer=400,inner=2000)" \
      --manifest-b zz-figures/chapter10/fig_03b_coverage_bootstrap_vs_n_hires.manifest.json \
      --label-b "Percentile (outer=2000,inner=2000)" \
      --out zz-figures/chapter10/fig_07_synthesis_compare.png \
      --dpi 300 --figsize 14,6 --ymin-coverage 0.88 --ymax-coverage 1.01
    ```

12. **Compilation LaTeX**

```bash
cd 10-monte-carlo-global-8d/
pdflatex -interaction=nonstopmode 10_monte_carlo_global_conceptuel.tex
pdflatex -interaction=nonstopmode 10_monte_carlo_global_details.tex
```

13. **Tests & validations**

* Vérifier l’existence et la non-nullité des fichiers dans `zz-data/chapter10/` :

  ```
  10_mc_config.json
  10_mc_samples.csv
  10_mc_results.csv
  10_mc_results.circ.csv
  10_mc_results.circ.with_fpeak.csv
  10_mc_results.agg.csv
  10_mc_results.circ.agg.csv
  10_mc_jalons_eval.csv
  10_mc_best.json
  10_mc_best_bootstrap.json
  ```

* S’assurer qu’il n’y a pas de `NaN` ou `Inf` dans `10_mc_results.circ.csv`.

* Confirmer que la colonne **active** pour les figures est `p95_20_300_recalc`
  (moyenne circulaire cohérente MCGT).

* Vérifier les bornes et tailles de grille (m1…m8) depuis `10_mc_config.json`.

* Contrôle de la couverture bootstrap (Fig. 3B) : ouvrir le/les `*.manifest.json` et
  valider `outer`, `inner`, `alpha`, `N_list`, ainsi que la légende.

* Valider la cohérence `10_mc_results.csv` ↔ `10_mc_results.circ.csv` :
  l’écart provient uniquement du mode de moyenne (linéaire vs circulaire).

* Vérifier visuellement chaque PNG/PDF dans `zz-figures/chapter10/` :
  titres, unités `[rad]`, barres Wilson (couverture), axes & légendes.

* (Recommandé) Bootstrap supplémentaire de p95 sur sous-échantillons 20–300 Hz
  pour obtenir une CI 95 % et la comparer au tableau de synthèse (Fig. 7).
