name: MCGT CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-test-validate:
    runs-on: ubuntu-latest
    env:
      # Config et règles de normalisation utilisées par les scripts internes
      MCGT_CONFIG: zz-configuration/mcgt-global-config.ini
      MCGT_RULES:  zz-manifests/migration_map.json

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: >-
            pip-${{ runner.os }}-${{ hashFiles('requirements.txt', 'setup.py', 'mcgt/pyproject.toml') }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: Install system deps (optional: CAMB/LALSuite)
        run: |
          sudo apt-get update
          sudo apt-get install -y libfftw3-dev libgsl-dev

      - name: Install Python deps (dev + validators)
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          # Installe le paquet local si présent (setup.py / pyproject.toml)
          if [ -f setup.py ] || [ -f pyproject.toml ]; then pip install -e ".[dev]" || pip install -e .; fi

      - name: Lint (pre-commit facultatif)
        run: |
          if [ -f .pre-commit-config.yaml ]; then
            pip install pre-commit
            # On ne bloque pas la CI sur le style à cette étape
            pre-commit run --all-files || true
          fi

      - name: Run tests (pytest)
        run: |
          pytest -q

      - name: Validate JSON via schemas (cibles critiques)
        run: |
          set -e
          python zz-schemas/validate_json.py zz-schemas/mc_config_schema.json         zz-data/chapter10/10_mc_config.json
          python zz-schemas/validate_json.py zz-schemas/mc_best_schema.json           zz-data/chapter10/10_mc_best.json
          python zz-schemas/validate_json.py zz-schemas/metrics_phase_schema.json     zz-data/chapter09/09_metrics_phase.json

      - name: Validate JSON (scan global)
        run: |
          python zz-schemas/validate_json.py --all

      - name: Validate CSV via table schemas (cibles critiques)
        run: |
          set -e
          python zz-schemas/validate_csv_table.py zz-schemas/mc_results_table_schema.json             zz-data/chapter10/10_mc_results.csv
          python zz-schemas/validate_csv_table.py zz-schemas/mc_results_table_schema.json             zz-data/chapter10/10_mc_results.circ.csv
          python zz-schemas/validate_csv_table.py zz-schemas/comparison_milestones_table_schema.json  zz-data/chapter09/09_comparison_milestones.csv

      - name: Validate CSV (scan global)
        run: |
          python zz-schemas/validate_csv_table.py --all

      - name: Manifest diagnostics (publication)
        run: |
          python zz-manifests/diag_consistency.py zz-manifests/manifest_publication.json \
            --report md > zz-manifests/manifest_report.md
          test -s zz-manifests/manifest_report.md

      - name: Manifest diagnostics (master, strict)
        run: |
          python zz-manifests/diag_consistency.py zz-manifests/manifest_master.json \
            --report json --normalize-paths --apply-aliases --strip-internal \
            --content-check --fail-on errors > diag_master.json
          python - << 'PY'
import json, sys
with open("diag_master.json","r",encoding="utf-8") as f:
    d = json.load(f)
errs = d.get("errors", 0)
print("errors:", errs)
sys.exit(0 if errs == 0 else 1)
PY

      - name: Upload test reports / logs (artifacts)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-logs
          path: |
            ./.pytest_cache
            ./coverage.xml
            ./diag_master.json
            ./zz-manifests/*.log
            ./zz-manifests/reports/**
            ./zz-manifests/manifest_report.md
          if-no-files-found: ignore
